{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IKeyValuePairs.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\n/**\n * A utility contract to log key / value pair events for the calling address.\n */\ninterface IKeyValuePairs {\n\n    /**\n     * Logs the given key / value pairs, along with the caller's address.\n     *\n     * @param _keys the keys\n     * @param _values the values\n     */\n    function updateValues(string[] memory _keys, string[] memory _values) external;\n}\n"
    },
    "contracts/KeyValuePairs.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity =0.8.19;\n\nimport { IKeyValuePairs } from \"./interfaces/IKeyValuePairs.sol\";\n\n/**\n * Implementation of [IKeyValuePairs](./interfaces/IKeyValuePairs.md), a utility \n * contract to log key / value pair events for the calling address.\n */\ncontract KeyValuePairs is IKeyValuePairs {\n\n    event ValueUpdated(address indexed theAddress, string key, string value);\n\n    error IncorrectValueCount();\n\n    /** @inheritdoc IKeyValuePairs*/\n    function updateValues(string[] memory _keys, string[] memory _values) external {\n\n        uint256 keyCount = _keys.length;\n\n        if (keyCount != _values.length)\n            revert IncorrectValueCount();\n\n        for (uint256 i; i < keyCount; ) {\n            emit ValueUpdated(msg.sender, _keys[i], _values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}