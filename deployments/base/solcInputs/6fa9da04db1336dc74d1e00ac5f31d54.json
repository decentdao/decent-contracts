{
  "language": "Solidity",
  "sources": {
    "contracts/hardhat-dependency-compiler/@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >0.0.0;\nimport '@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol';\n"
    },
    "@gnosis.pm/zodiac/contracts/factory/ModuleProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.8.0;\n\ncontract ModuleProxyFactory {\n    event ModuleProxyCreation(\n        address indexed proxy,\n        address indexed masterCopy\n    );\n\n    /// `target` can not be zero.\n    error ZeroAddress(address target);\n\n    /// `address_` is already taken.\n    error TakenAddress(address address_);\n\n    /// @notice Initialization failed.\n    error FailedInitialization();\n\n    function createProxy(address target, bytes32 salt)\n        internal\n        returns (address result)\n    {\n        if (address(target) == address(0)) revert ZeroAddress(target);\n        bytes memory deployment = abi.encodePacked(\n            hex\"602d8060093d393df3363d3d373d3d3d363d73\",\n            target,\n            hex\"5af43d82803e903d91602b57fd5bf3\"\n        );\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            result := create2(0, add(deployment, 0x20), mload(deployment), salt)\n        }\n        if (result == address(0)) revert TakenAddress(result);\n    }\n\n    function deployModule(\n        address masterCopy,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) public returns (address proxy) {\n        proxy = createProxy(\n            masterCopy,\n            keccak256(abi.encodePacked(keccak256(initializer), saltNonce))\n        );\n        (bool success, ) = proxy.call(initializer);\n        if (!success) revert FailedInitialization();\n\n        emit ModuleProxyCreation(proxy, masterCopy);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}