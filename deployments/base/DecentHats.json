{
  "address": "0xd71e2bdC28BFa907652Cfb8BeAfdF59822B71B1B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IHats",
          "name": "_hats",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hatsAccountImplementation",
          "type": "address"
        },
        {
          "internalType": "contract IERC6551Registry",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keyValuePairs",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "SALT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_topHatDetails",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_topHatImageURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "eligibility",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "maxSupply",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "toggle",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "details",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isMutable",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "wearer",
              "type": "address"
            }
          ],
          "internalType": "struct DecentHats.Hat",
          "name": "_adminHat",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "eligibility",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "maxSupply",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "toggle",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "details",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageURI",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isMutable",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "wearer",
              "type": "address"
            }
          ],
          "internalType": "struct DecentHats.Hat[]",
          "name": "_hats",
          "type": "tuple[]"
        }
      ],
      "name": "createAndDeclareTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hats",
      "outputs": [
        {
          "internalType": "contract IHats",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatsAccountImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyValuePairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IERC6551Registry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd189b0d54a1475487eb3684c2cdfc21e1903c73f8debe3c09b53410390d0d1fa",
  "receipt": {
    "to": null,
    "from": "0xb5Ca125166C1987A35EDD550E16846Fa1e1D9bB3",
    "contractAddress": "0xd71e2bdC28BFa907652Cfb8BeAfdF59822B71B1B",
    "transactionIndex": 64,
    "gasUsed": "1075927",
    "logsBloom": "0x
    "blockHash": "0xa435e0e97a5076b6dce42c8940d14e73b327f52bd3cddd3227eae38e0bf1ac95",
    "transactionHash": "0xd189b0d54a1475487eb3684c2cdfc21e1903c73f8debe3c09b53410390d0d1fa",
    "logs": [],
    "blockNumber": 16682069,
    "cumulativeGasUsed": "21426507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3bc1A0Ad72417f2d411118085256fC53CBdDd137",
    "0xfEf83A660b7C10a3EdaFdCF62DEee1fD8a875D29",
    "0x000000006551c19487814612e58FE06813775758",
    "0x535B64f9Ef529Ac8B34Ac7273033bBE67B34f131"
  ],
  "numDeployments": 1,
  "solcInputHash": "54669e5a6b69e2447f2d408fa1eb61fc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IHats\",\"name\":\"_hats\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hatsAccountImplementation\",\"type\":\"address\"},{\"internalType\":\"contract IERC6551Registry\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keyValuePairs\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"SALT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_topHatDetails\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_topHatImageURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"eligibility\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"toggle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMutable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wearer\",\"type\":\"address\"}],\"internalType\":\"struct DecentHats.Hat\",\"name\":\"_adminHat\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"eligibility\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"toggle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMutable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wearer\",\"type\":\"address\"}],\"internalType\":\"struct DecentHats.Hat[]\",\"name\":\"_hats\",\"type\":\"tuple[]\"}],\"name\":\"createAndDeclareTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hats\",\"outputs\":[{\"internalType\":\"contract IHats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatsAccountImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyValuePairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IERC6551Registry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DecentHats.sol\":\"DecentHats\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IAvatar {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0xcd5508ffe596eef8fbccfd5fc4f10a34397773547ce64e212d48b5212865ec1f\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/DecentHats.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport {Enum} from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport {IAvatar} from \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport {IHats} from \\\"./interfaces/hats/IHats.sol\\\";\\nimport {IERC6551Registry} from \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\ncontract DecentHats {\\n    struct Hat {\\n        address eligibility;\\n        uint32 maxSupply;\\n        address toggle;\\n        string details;\\n        string imageURI;\\n        bool isMutable;\\n        address wearer;\\n    }\\n\\n    IHats public hats;\\n    address public hatsAccountImplementation;\\n    IERC6551Registry public registry;\\n    address public keyValuePairs;\\n\\n    bytes32 public constant SALT = keccak256(\\\"DecentHats\\\");\\n\\n    constructor(\\n        IHats _hats,\\n        address _hatsAccountImplementation,\\n        IERC6551Registry _registry,\\n        address _keyValuePairs\\n    ) {\\n        hats = _hats;\\n        hatsAccountImplementation = _hatsAccountImplementation;\\n        registry = _registry;\\n        keyValuePairs = _keyValuePairs;\\n    }\\n\\n    function createAndDeclareTree(\\n        string memory _topHatDetails,\\n        string memory _topHatImageURI,\\n        Hat calldata _adminHat,\\n        Hat[] calldata _hats\\n    ) public {\\n        uint256 topHatId = hats.mintTopHat(\\n            address(this),\\n            _topHatDetails,\\n            _topHatImageURI\\n        );\\n        registry.createAccount(\\n            hatsAccountImplementation,\\n            SALT,\\n            block.chainid,\\n            address(hats),\\n            topHatId\\n        );\\n\\n        string[] memory keys = new string[](1);\\n        keys[0] = \\\"topHatId\\\";\\n\\n        string[] memory values = new string[](1);\\n        values[0] = Strings.toString(topHatId);\\n\\n        IAvatar(msg.sender).execTransactionFromModule(\\n            keyValuePairs,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"updateValues(string[],string[])\\\",\\n                keys,\\n                values\\n            ),\\n            Enum.Operation.Call\\n        );\\n\\n        uint256 adminHatId = hats.createHat(\\n            topHatId,\\n            _adminHat.details,\\n            _adminHat.maxSupply,\\n            _adminHat.eligibility,\\n            _adminHat.toggle,\\n            _adminHat.isMutable,\\n            _adminHat.imageURI\\n        );\\n        registry.createAccount(\\n            hatsAccountImplementation,\\n            SALT,\\n            block.chainid,\\n            address(hats),\\n            adminHatId\\n        );\\n\\n        if (_adminHat.wearer != address(0)) {\\n            hats.mintHat(adminHatId, _adminHat.wearer);\\n        }\\n\\n        for (uint256 i = 0; i < _hats.length; ) {\\n            Hat memory hat = _hats[i];\\n            uint256 hatId = hats.createHat(\\n                adminHatId,\\n                hat.details,\\n                hat.maxSupply,\\n                hat.eligibility,\\n                hat.toggle,\\n                hat.isMutable,\\n                hat.imageURI\\n            );\\n            registry.createAccount(\\n                hatsAccountImplementation,\\n                SALT,\\n                block.chainid,\\n                address(hats),\\n                hatId\\n            );\\n\\n            if (hat.wearer != address(0)) {\\n                hats.mintHat(hatId, hat.wearer);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        hats.transferHat(topHatId, address(this), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xf47d940a906a77e61f3d7dc16b75b6d67668ac3a9c9aeb659af340191ab6260e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev The registry MUST emit the ERC6551AccountCreated event upon successful account creation.\\n     */\\n    event ERC6551AccountCreated(\\n        address account,\\n        address indexed implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address indexed tokenContract,\\n        uint256 indexed tokenId\\n    );\\n\\n    /**\\n     * @dev The registry MUST revert with AccountCreationFailed error if the create2 operation fails.\\n     */\\n    error AccountCreationFailed();\\n\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n\\n    /**\\n     * @dev Returns the computed token bound account address for a non-fungible token.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function account(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external view returns (address account);\\n}\\n\",\"keccak256\":\"0x6f7e23b7c0eeb703e03ca9cdbf01094d3cec05571192755ec40343c29c76ba51\",\"license\":\"MIT\"},\"contracts/interfaces/hats/IHats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface IHats {\\n    function mintTopHat(\\n        address _target,\\n        string memory _details,\\n        string memory _imageURI\\n    ) external returns (uint256 topHatId);\\n\\n    function createHat(\\n        uint256 _admin,\\n        string calldata _details,\\n        uint32 _maxSupply,\\n        address _eligibility,\\n        address _toggle,\\n        bool _mutable,\\n        string calldata _imageURI\\n    ) external returns (uint256 newHatId);\\n\\n    function mintHat(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool success);\\n\\n    function transferHat(uint256 _hatId, address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0x8e35022f5c0fcf0059033abec78ec890f0cf3bbac09d6d24051cff9679239511\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051620011d8380380620011d88339810160408190526100319161009c565b600080546001600160a01b039586166001600160a01b03199182161790915560018054948616948216949094179093556002805492851692841692909217909155600380549190931691161790556100fb565b6001600160a01b038116811461009957600080fd5b50565b600080600080608085870312156100b257600080fd5b84516100bd81610084565b60208601519094506100ce81610084565b60408601519093506100df81610084565b60608601519092506100f081610084565b939692955090935050565b6110cd806200010b6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063447a7a85146100675780637b10399914610097578063ba9a91a5146100aa578063bb70162b146100cd578063ecd1d997146100e2578063f99f0238146100f5575b600080fd5b60035461007a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60025461007a906001600160a01b031681565b6100bf60008051602061107883398151915281565b60405190815260200161008e565b6100e06100db366004610a58565b610108565b005b60015461007a906001600160a01b031681565b60005461007a906001600160a01b031681565b60008054604051631a64dfad60e01b81526001600160a01b0390911690631a64dfad9061013d9030908a908a90600401610b5a565b6020604051808303816000875af115801561015c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101809190610b9a565b600254600154600054604051638a54c52f60e01b81529394506001600160a01b0392831693638a54c52f936101d293811692600080516020611078833981519152924692909116908890600401610bb3565b6020604051808303816000875af11580156101f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102159190610bfe565b50604080516001808252818301909252600091816020015b606081526020019060019003908161022d579050509050604051806040016040528060088152602001671d1bdc12185d125960c21b8152508160008151811061027857610278610c22565b6020908102919091010152604080516001808252818301909252600091816020015b606081526020019060019003908161029a5790505090506102ba83610837565b816000815181106102cd576102cd610c22565b6020908102919091010152600354604051339163468721a7916001600160a01b03909116906000906103059087908790602401610c8d565b60408051601f198184030181529181526020820180516001600160e01b031663579374b960e11b1790525160e085901b6001600160e01b031916815261035393929190600090600401610cbb565b6020604051808303816000875af1158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190610d1f565b50600080546001600160a01b031663b052925e856103b760608b018b610d3c565b6103c760408d0160208e01610d9c565b6103d460208e018e610dc2565b8d60400160208101906103e79190610dc2565b8e60a00160208101906103fa9190610dea565b8f806080019061040a9190610d3c565b6040518a63ffffffff1660e01b815260040161042e99989796959493929190610e30565b6020604051808303816000875af115801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104719190610b9a565b600254600154600054604051638a54c52f60e01b81529394506001600160a01b0392831693638a54c52f936104c393811692600080516020611078833981519152924692909116908890600401610bb3565b6020604051808303816000875af11580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610bfe565b50600061051960e0890160c08a01610dc2565b6001600160a01b0316146105bb576000546001600160a01b031663641f776e8261054960e08b0160c08c01610dc2565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b99190610d1f565b505b60005b858110156107c15760008787838181106105da576105da610c22565b90506020028101906105ec9190610e98565b6105f590610eb8565b6000805460608301516020840151845160408087015160a088015160808901519251635829492f60e11b815298995096976001600160a01b039096169663b052925e9661064e968d969095909490939291600401610f7a565b6020604051808303816000875af115801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610b9a565b600254600154600054604051638a54c52f60e01b81529394506001600160a01b0392831693638a54c52f936106e393811692600080516020611078833981519152924692909116908890600401610bb3565b6020604051808303816000875af1158015610702573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107269190610bfe565b5060c08201516001600160a01b0316156107b75760005460c083015160405163320fbbb760e11b8152600481018490526001600160a01b03918216602482015291169063641f776e906044016020604051808303816000875af1158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b59190610d1f565b505b50506001016105be565b506000546040516329287c1b60e21b8152600481018690523060248201523360448201526001600160a01b039091169063a4a1f06c90606401600060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b50505050505050505050505050565b60608160000361085e5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610888578061087281610ff4565b91506108819050600a83611023565b9150610862565b60008167ffffffffffffffff8111156108a3576108a3610940565b6040519080825280601f01601f1916602001820160405280156108cd576020820181803683370190505b5090505b8415610938576108e2600183611037565b91506108ef600a86611050565b6108fa906030611064565b60f81b81838151811061090f5761090f610c22565b60200101906001600160f81b031916908160001a905350610931600a86611023565b94506108d1565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160e0810167ffffffffffffffff8111828210171561097957610979610940565b60405290565b600082601f83011261099057600080fd5b813567ffffffffffffffff808211156109ab576109ab610940565b604051601f8301601f19908116603f011681019082821181831017156109d3576109d3610940565b816040528381528660208588010111156109ec57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112610a1e57600080fd5b50813567ffffffffffffffff811115610a3657600080fd5b6020830191508360208260051b8501011115610a5157600080fd5b9250929050565b600080600080600060808688031215610a7057600080fd5b853567ffffffffffffffff80821115610a8857600080fd5b610a9489838a0161097f565b96506020880135915080821115610aaa57600080fd5b610ab689838a0161097f565b95506040880135915080821115610acc57600080fd5b9087019060e0828a031215610ae057600080fd5b90935060608701359080821115610af657600080fd5b50610b0388828901610a0c565b969995985093965092949392505050565b6000815180845260005b81811015610b3a57602081850181015186830182015201610b1e565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b0384168152606060208201819052600090610b7e90830185610b14565b8281036040840152610b908185610b14565b9695505050505050565b600060208284031215610bac57600080fd5b5051919050565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b6001600160a01b0381168114610bfb57600080fd5b50565b600060208284031215610c1057600080fd5b8151610c1b81610be6565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b85811015610c80578284038952610c6e848351610b14565b98850198935090840190600101610c56565b5091979650505050505050565b604081526000610ca06040830185610c38565b8281036020840152610cb28185610c38565b95945050505050565b60018060a01b0385168152836020820152608060408201526000610ce26080830185610b14565b905060028310610d0257634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b8015158114610bfb57600080fd5b600060208284031215610d3157600080fd5b8151610c1b81610d11565b6000808335601e19843603018112610d5357600080fd5b83018035915067ffffffffffffffff821115610d6e57600080fd5b602001915036819003821315610a5157600080fd5b803563ffffffff81168114610d9757600080fd5b919050565b600060208284031215610dae57600080fd5b610c1b82610d83565b8035610d9781610be6565b600060208284031215610dd457600080fd5b8135610c1b81610be6565b8035610d9781610d11565b600060208284031215610dfc57600080fd5b8135610c1b81610d11565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260e060208201526000610e4a60e083018a8c610e07565b63ffffffff891660408401526001600160a01b0388811660608501528716608084015285151560a084015282810360c0840152610e88818587610e07565b9c9b505050505050505050505050565b6000823560de19833603018112610eae57600080fd5b9190910192915050565b600060e08236031215610eca57600080fd5b610ed2610956565b610edb83610db7565b8152610ee960208401610d83565b6020820152610efa60408401610db7565b6040820152606083013567ffffffffffffffff80821115610f1a57600080fd5b610f263683870161097f565b60608401526080850135915080821115610f3f57600080fd5b50610f4c3682860161097f565b608083015250610f5e60a08401610ddf565b60a0820152610f6f60c08401610db7565b60c082015292915050565b87815260e060208201526000610f9360e0830189610b14565b63ffffffff881660408401526001600160a01b0387811660608501528616608084015284151560a084015282810360c0840152610fd08185610b14565b9a9950505050505050505050565b634e487b7160e01b600052601160045260246000fd5b60006001820161100657611006610fde565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826110325761103261100d565b500490565b8181038181111561104a5761104a610fde565b92915050565b60008261105f5761105f61100d565b500690565b8082018082111561104a5761104a610fde56feaeaaac369e030e75c8cdbcd1be01d9a187f25a5fe71be28726ca140c1684cb1ba2646970667358221220548256f341d96807e2fd3cea9c3f2467f75e042683d7ca48f31e2c56a026e64d64736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 349,
        "contract": "contracts/DecentHats.sol:DecentHats",
        "label": "hats",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHats)725"
      },
      {
        "astId": 351,
        "contract": "contracts/DecentHats.sol:DecentHats",
        "label": "hatsAccountImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 354,
        "contract": "contracts/DecentHats.sol:DecentHats",
        "label": "registry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC6551Registry)674"
      },
      {
        "astId": 356,
        "contract": "contracts/DecentHats.sol:DecentHats",
        "label": "keyValuePairs",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC6551Registry)674": {
        "encoding": "inplace",
        "label": "contract IERC6551Registry",
        "numberOfBytes": "20"
      },
      "t_contract(IHats)725": {
        "encoding": "inplace",
        "label": "contract IHats",
        "numberOfBytes": "20"
      }
    }
  }
}