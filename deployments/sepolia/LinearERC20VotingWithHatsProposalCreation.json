{
  "address": "0x4F5d44477C0Da5df31c2c5Bdd291224035708C39",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HatAlreadyWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HatNotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBasisNumerator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidHatsContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQuorumNumerator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoHatsWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAzorius",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VotingEnded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "azoriusModule",
          "type": "address"
        }
      ],
      "name": "AzoriusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisNumerator",
          "type": "uint256"
        }
      ],
      "name": "BasisNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hatId",
          "type": "uint256"
        }
      ],
      "name": "HatRemovedFromWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hatId",
          "type": "uint256"
        }
      ],
      "name": "HatWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "proposalId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "votingEndBlock",
          "type": "uint32"
        }
      ],
      "name": "ProposalInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "QuorumNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredProposerWeight",
          "type": "uint256"
        }
      ],
      "name": "RequiredProposerWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "azoriusModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "StrategySetUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "proposalId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "voteType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "votingPeriod",
          "type": "uint32"
        }
      ],
      "name": "VotingPeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUORUM_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "azoriusModule",
      "outputs": [
        {
          "internalType": "contract IAzorius",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basisNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "getProposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "votingSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "getProposalVotingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "getVotingWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedHatsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceToken",
      "outputs": [
        {
          "internalType": "contract IVotes",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hatsContract",
      "outputs": [
        {
          "internalType": "contract IHats",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initializeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hatId",
          "type": "uint256"
        }
      ],
      "name": "isHatWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "isPassed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isProposer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_noVotes",
          "type": "uint256"
        }
      ],
      "name": "meetsBasis",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_abstainVotes",
          "type": "uint256"
        }
      ],
      "name": "meetsQuorum",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hatId",
          "type": "uint256"
        }
      ],
      "name": "removeHatFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requiredProposerWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_azoriusModule",
          "type": "address"
        }
      ],
      "name": "setAzorius",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initializeParams",
          "type": "bytes"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_basisNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateBasisNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quorumNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requiredProposerWeight",
          "type": "uint256"
        }
      ],
      "name": "updateRequiredProposerWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_votingPeriod",
          "type": "uint32"
        }
      ],
      "name": "updateVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_voteType",
          "type": "uint8"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "votingEndBlock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hatId",
          "type": "uint256"
        }
      ],
      "name": "whitelistHat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistedHatIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x255f465108d54babaeea38632f8e99557a06dada02576b8e47df05c3c02fa065",
  "receipt": {
    "to": null,
    "from": "0x637366C372a9096b262bd2fe6c40D7BCc6239976",
    "contractAddress": "0x4F5d44477C0Da5df31c2c5Bdd291224035708C39",
    "transactionIndex": 57,
    "gasUsed": "1600644",
    "logsBloom": "0x
    "blockHash": "0x44495c55d4829971c35b95a1352513a0ee99295867ff59db9060c2fc52aeb8c6",
    "transactionHash": "0x255f465108d54babaeea38632f8e99557a06dada02576b8e47df05c3c02fa065",
    "logs": [
      {
        "transactionIndex": 57,
        "blockNumber": 6929977,
        "transactionHash": "0x255f465108d54babaeea38632f8e99557a06dada02576b8e47df05c3c02fa065",
        "address": "0x4F5d44477C0Da5df31c2c5Bdd291224035708C39",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 70,
        "blockHash": "0x44495c55d4829971c35b95a1352513a0ee99295867ff59db9060c2fc52aeb8c6"
      }
    ],
    "blockNumber": 6929977,
    "cumulativeGasUsed": "7217014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8098c390a54ad5a8bcff70bed7c24a3c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HatAlreadyWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HatNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBasisNumerator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHatsContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQuorumNumerator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoHatsWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAzorius\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingEnded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"azoriusModule\",\"type\":\"address\"}],\"name\":\"AzoriusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisNumerator\",\"type\":\"uint256\"}],\"name\":\"BasisNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hatId\",\"type\":\"uint256\"}],\"name\":\"HatRemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hatId\",\"type\":\"uint256\"}],\"name\":\"HatWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"proposalId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"votingEndBlock\",\"type\":\"uint32\"}],\"name\":\"ProposalInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumNumerator\",\"type\":\"uint256\"}],\"name\":\"QuorumNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredProposerWeight\",\"type\":\"uint256\"}],\"name\":\"RequiredProposerWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"azoriusModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StrategySetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"proposalId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"voteType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"votingPeriod\",\"type\":\"uint32\"}],\"name\":\"VotingPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUORUM_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"azoriusModule\",\"outputs\":[{\"internalType\":\"contract IAzorius\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votingSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"getProposalVotingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"getVotingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedHatsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"contract IVotes\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hatsContract\",\"outputs\":[{\"internalType\":\"contract IHats\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initializeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hatId\",\"type\":\"uint256\"}],\"name\":\"isHatWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"isPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noVotes\",\"type\":\"uint256\"}],\"name\":\"meetsBasis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_abstainVotes\",\"type\":\"uint256\"}],\"name\":\"meetsQuorum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hatId\",\"type\":\"uint256\"}],\"name\":\"removeHatFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredProposerWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_azoriusModule\",\"type\":\"address\"}],\"name\":\"setAzorius\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializeParams\",\"type\":\"bytes\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basisNumerator\",\"type\":\"uint256\"}],\"name\":\"updateBasisNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorumNumerator\",\"type\":\"uint256\"}],\"name\":\"updateQuorumNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requiredProposerWeight\",\"type\":\"uint256\"}],\"name\":\"updateRequiredProposerWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_votingPeriod\",\"type\":\"uint32\"}],\"name\":\"updateVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_voteType\",\"type\":\"uint8\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"votingEndBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_hatId\",\"type\":\"uint256\"}],\"name\":\"whitelistHat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedHatIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getProposalVotes(uint32)\":{\"params\":{\"_proposalId\":\"id of the Proposal\"},\"returns\":{\"abstainVotes\":\"current count of \\\"ABSTAIN\\\" votes\",\"endBlock\":\"block number voting ends\",\"noVotes\":\"current count of \\\"NO\\\" votes\",\"startBlock\":\"block number voting starts\",\"yesVotes\":\"current count of \\\"YES\\\" votes\"}},\"getProposalVotingSupply(uint32)\":{\"params\":{\"_proposalId\":\"id of the Proposal\"},\"returns\":{\"_0\":\"uint256 voting supply snapshot for the given _proposalId\"}},\"getVotingWeight(address,uint32)\":{\"params\":{\"_proposalId\":\"id of the Proposal\",\"_voter\":\"address of the voter\"},\"returns\":{\"_0\":\"uint256 the address' voting weight\"}},\"getWhitelistedHatsCount()\":{\"returns\":{\"_0\":\"The number of whitelisted hats\"}},\"hasVoted(uint32,address)\":{\"params\":{\"_address\":\"address to check\",\"_proposalId\":\"id of the Proposal to check\"},\"returns\":{\"_0\":\"bool true if the address has voted on the Proposal, otherwise false\"}},\"initializeProposal(bytes)\":{\"params\":{\"_data\":\"arbitrary data to pass to this BaseStrategy\"}},\"isHatWhitelisted(uint256)\":{\"params\":{\"_hatId\":\"The ID of the Hat to check\"},\"returns\":{\"_0\":\"True if the hat is whitelisted, false otherwise\"}},\"isPassed(uint32)\":{\"params\":{\"_proposalId\":\"proposalId to check\"},\"returns\":{\"_0\":\"bool true if the proposal has passed, otherwise false\"}},\"isProposer(address)\":{\"details\":\"Checks if an address is authorized to create proposals.\",\"params\":{\"_address\":\"The address to check for proposal creation authorization.\"},\"returns\":{\"_0\":\"bool Returns true if the address is wearing any of the whitelisted Hats, false otherwise.\"}},\"meetsBasis(uint256,uint256)\":{\"params\":{\"_noVotes\":\"number of votes against\",\"_yesVotes\":\"number of votes in favor\"},\"returns\":{\"_0\":\"bool whether the yes votes meets the set basis\"}},\"meetsQuorum(uint256,uint256,uint256)\":{\"params\":{\"_abstainVotes\":\"number of votes abstaining\",\"_totalSupply\":\"the total supply of tokens\",\"_yesVotes\":\"number of votes in favor\"},\"returns\":{\"_0\":\"bool whether the total number of yes votes + abstain meets the quorum\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quorumVotes(uint32)\":{\"params\":{\"_proposalId\":\"The ID of the proposal to get quorum votes for\"},\"returns\":{\"_0\":\"uint256 The quantity of votes required to meet quorum\"}},\"removeHatFromWhitelist(uint256)\":{\"params\":{\"_hatId\":\"The ID of the Hat to remove from the whitelist\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAzorius(address)\":{\"params\":{\"_azoriusModule\":\"address of the Azorius Safe module\"}},\"setUp(bytes)\":{\"params\":{\"initializeParams\":\"encoded initialization parameters: `address _owner`, `address _governanceToken`, `address _azoriusModule`, `uint32 _votingPeriod`, `uint256 _quorumNumerator`, `uint256 _basisNumerator`, `address _hatsContract`, `uint256[] _initialWhitelistedHats`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBasisNumerator(uint256)\":{\"params\":{\"_basisNumerator\":\"numerator to use\"}},\"updateQuorumNumerator(uint256)\":{\"params\":{\"_quorumNumerator\":\"numerator to use when calculating quorum (over 1,000,000)\"}},\"updateRequiredProposerWeight(uint256)\":{\"params\":{\"_requiredProposerWeight\":\"required token voting weight\"}},\"updateVotingPeriod(uint32)\":{\"params\":{\"_votingPeriod\":\"voting time period (in blocks)\"}},\"vote(uint32,uint8)\":{\"params\":{\"_proposalId\":\"id of the Proposal to vote on\",\"_voteType\":\"Proposal support as defined in VoteType (NO, YES, ABSTAIN)\"}},\"votingEndBlock(uint32)\":{\"params\":{\"_proposalId\":\"proposalId to check\"},\"returns\":{\"_0\":\"uint32 block number when voting ends on the Proposal\"}},\"whitelistHat(uint256)\":{\"params\":{\"_hatId\":\"The ID of the Hat to whitelist\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidQuorumNumerator()\":[{\"notice\":\"Ensures the numerator cannot be larger than the denominator. \"}]},\"kind\":\"user\",\"methods\":{\"BASIS_DENOMINATOR()\":{\"notice\":\"The denominator to use when calculating basis (1,000,000). \"},\"QUORUM_DENOMINATOR()\":{\"notice\":\"The denominator to use when calculating quorum (1,000,000). \"},\"basisNumerator()\":{\"notice\":\"The numerator to use when calculating basis (adjustable). \"},\"getProposalVotes(uint32)\":{\"notice\":\"Returns the current state of the specified Proposal.\"},\"getProposalVotingSupply(uint32)\":{\"notice\":\"Returns a snapshot of total voting supply for a given Proposal.  Because token supplies can change, it is necessary to calculate quorum from the supply available at the time of the Proposal's creation, not when it is being voted on passes / fails.\"},\"getVotingWeight(address,uint32)\":{\"notice\":\"Calculates the voting weight an address has for a specific Proposal.\"},\"getWhitelistedHatsCount()\":{\"notice\":\"Returns the number of whitelisted hats.\"},\"hasVoted(uint32,address)\":{\"notice\":\"Returns whether an address has voted on the specified Proposal.\"},\"initializeProposal(bytes)\":{\"notice\":\"Called by the [Azorius](../Azorius.md) module. This notifies this  [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created.\"},\"isHatWhitelisted(uint256)\":{\"notice\":\"Checks if a hat is whitelisted.\"},\"isPassed(uint32)\":{\"notice\":\"Returns whether a Proposal has been passed.\"},\"isProposer(address)\":{\"notice\":\"This function overrides the isProposer function from the parent contract. It iterates through all whitelisted Hat IDs and checks if the given address is wearing any of them using the Hats Protocol.\"},\"meetsBasis(uint256,uint256)\":{\"notice\":\"Calculates whether a vote meets its basis.\"},\"meetsQuorum(uint256,uint256,uint256)\":{\"notice\":\"Calculates whether a vote meets quorum. This is calculated based on yes votes + abstain votes.\"},\"quorumNumerator()\":{\"notice\":\"The numerator to use when calculating quorum (adjustable). \"},\"quorumVotes(uint32)\":{\"notice\":\"Calculates the total number of votes required for a proposal to meet quorum. \"},\"removeHatFromWhitelist(uint256)\":{\"notice\":\"Removes a Hat from the whitelist for proposal creation.\"},\"requiredProposerWeight()\":{\"notice\":\"Voting weight required to be able to submit Proposals. \"},\"setAzorius(address)\":{\"notice\":\"Sets the address of the [Azorius](../Azorius.md) contract this  [BaseStrategy](../BaseStrategy.md) is being used on.\"},\"setUp(bytes)\":{\"notice\":\"Sets up the contract with its initial parameters.\"},\"updateBasisNumerator(uint256)\":{\"notice\":\"Updates the `basisNumerator` for future Proposals.\"},\"updateQuorumNumerator(uint256)\":{\"notice\":\"Updates the quorum required for future Proposals.\"},\"updateRequiredProposerWeight(uint256)\":{\"notice\":\"Updates the voting weight required to submit new Proposals.\"},\"updateVotingPeriod(uint32)\":{\"notice\":\"Updates the voting time period for new Proposals.\"},\"vote(uint32,uint8)\":{\"notice\":\"Casts votes for a Proposal, equal to the caller's token delegation.\"},\"votingEndBlock(uint32)\":{\"notice\":\"Returns the block number voting ends on a given Proposal.\"},\"votingPeriod()\":{\"notice\":\"Number of blocks a new Proposal can be voted on. \"},\"whitelistHat(uint256)\":{\"notice\":\"Adds a Hat to the whitelist for proposal creation.\"},\"whitelistedHatIds(uint256)\":{\"notice\":\"Array to store whitelisted Hat IDs. \"}},\"notice\":\"An [Azorius](./Azorius.md) [BaseStrategy](./BaseStrategy.md) implementation that enables linear (i.e. 1 to 1) ERC21 based token voting, with proposal creation restricted to users wearing whitelisted Hats.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol\":\"LinearERC20VotingWithHatsProposalCreation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"contracts/azorius/BaseQuorumPercent.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * An Azorius extension contract that enables percent based quorums.\\n * Intended to be implemented by [BaseStrategy](./BaseStrategy.md) implementations.\\n */\\nabstract contract BaseQuorumPercent is OwnableUpgradeable {\\n    \\n    /** The numerator to use when calculating quorum (adjustable). */\\n    uint256 public quorumNumerator;\\n\\n    /** The denominator to use when calculating quorum (1,000,000). */\\n    uint256 public constant QUORUM_DENOMINATOR = 1_000_000;\\n\\n    /** Ensures the numerator cannot be larger than the denominator. */\\n    error InvalidQuorumNumerator();\\n\\n    event QuorumNumeratorUpdated(uint256 quorumNumerator);\\n\\n    /** \\n     * Updates the quorum required for future Proposals.\\n     *\\n     * @param _quorumNumerator numerator to use when calculating quorum (over 1,000,000)\\n     */\\n    function updateQuorumNumerator(uint256 _quorumNumerator) public virtual onlyOwner {\\n        _updateQuorumNumerator(_quorumNumerator);\\n    }\\n\\n    /** Internal implementation of `updateQuorumNumerator`. */\\n    function _updateQuorumNumerator(uint256 _quorumNumerator) internal virtual {\\n        if (_quorumNumerator > QUORUM_DENOMINATOR)\\n            revert InvalidQuorumNumerator();\\n\\n        quorumNumerator = _quorumNumerator;\\n\\n        emit QuorumNumeratorUpdated(_quorumNumerator);\\n    }\\n\\n    /**\\n     * Calculates whether a vote meets quorum. This is calculated based on yes votes + abstain\\n     * votes.\\n     *\\n     * @param _totalSupply the total supply of tokens\\n     * @param _yesVotes number of votes in favor\\n     * @param _abstainVotes number of votes abstaining\\n     * @return bool whether the total number of yes votes + abstain meets the quorum\\n     */\\n    function meetsQuorum(uint256 _totalSupply, uint256 _yesVotes, uint256 _abstainVotes) public view returns (bool) {\\n        return _yesVotes + _abstainVotes >= (_totalSupply * quorumNumerator) / QUORUM_DENOMINATOR;\\n    }\\n\\n    /**\\n     * Calculates the total number of votes required for a proposal to meet quorum.\\n     * \\n     * @param _proposalId The ID of the proposal to get quorum votes for\\n     * @return uint256 The quantity of votes required to meet quorum\\n     */\\n    function quorumVotes(uint32 _proposalId) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x0218f97766d3b796f72e4ee0e1b267e72ccad8d979dfd14c5699f93d05c64c29\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { IAzorius } from \\\"./interfaces/IAzorius.sol\\\";\\nimport { IBaseStrategy } from \\\"./interfaces/IBaseStrategy.sol\\\";\\nimport { FactoryFriendly } from \\\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * The base abstract contract for all voting strategies in Azorius.\\n */\\nabstract contract BaseStrategy is OwnableUpgradeable, FactoryFriendly, IBaseStrategy {\\n\\n    event AzoriusSet(address indexed azoriusModule);\\n    event StrategySetUp(address indexed azoriusModule, address indexed owner);\\n\\n    error OnlyAzorius();\\n\\n    IAzorius public azoriusModule;\\n\\n    /**\\n     * Ensures that only the [Azorius](./Azorius.md) contract that pertains to this \\n     * [BaseStrategy](./BaseStrategy.md) can call functions on it.\\n     */\\n    modifier onlyAzorius() {\\n        if (msg.sender != address(azoriusModule)) revert OnlyAzorius();\\n        _;\\n    }\\n\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function setAzorius(address _azoriusModule) external onlyOwner {\\n        azoriusModule = IAzorius(_azoriusModule);\\n        emit AzoriusSet(_azoriusModule);\\n    }\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function initializeProposal(bytes memory _data) external virtual;\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function isPassed(uint32 _proposalId) external view virtual returns (bool);\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function isProposer(address _address) external view virtual returns (bool);\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function votingEndBlock(uint32 _proposalId) external view virtual returns (uint32);\\n\\n    /**\\n     * Sets the address of the [Azorius](Azorius.md) module contract.\\n     *\\n     * @param _azoriusModule address of the Azorius module\\n     */\\n    function _setAzorius(address _azoriusModule) internal {\\n        azoriusModule = IAzorius(_azoriusModule);\\n        emit AzoriusSet(_azoriusModule);\\n    }\\n}\\n\",\"keccak256\":\"0xd04aeec28b5a7c7bad44f2c9dfe7641240e319b8d76d05f940453a258411c567\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/BaseVotingBasisPercent.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * An Azorius extension contract that enables percent based voting basis calculations.\\n *\\n * Intended to be implemented by BaseStrategy implementations, this allows for voting strategies\\n * to dictate any basis strategy for passing a Proposal between >50% (simple majority) to 100%.\\n *\\n * See https://en.wikipedia.org/wiki/Voting#Voting_basis.\\n * See https://en.wikipedia.org/wiki/Supermajority.\\n */\\nabstract contract BaseVotingBasisPercent is OwnableUpgradeable {\\n    \\n    /** The numerator to use when calculating basis (adjustable). */\\n    uint256 public basisNumerator;\\n\\n    /** The denominator to use when calculating basis (1,000,000). */\\n    uint256 public constant BASIS_DENOMINATOR = 1_000_000;\\n\\n    error InvalidBasisNumerator();\\n\\n    event BasisNumeratorUpdated(uint256 basisNumerator);\\n\\n    /**\\n     * Updates the `basisNumerator` for future Proposals.\\n     *\\n     * @param _basisNumerator numerator to use\\n     */\\n    function updateBasisNumerator(uint256 _basisNumerator) public virtual onlyOwner {\\n        _updateBasisNumerator(_basisNumerator);\\n    }\\n\\n    /** Internal implementation of `updateBasisNumerator`. */\\n    function _updateBasisNumerator(uint256 _basisNumerator) internal virtual {\\n        if (_basisNumerator > BASIS_DENOMINATOR || _basisNumerator < BASIS_DENOMINATOR / 2)\\n            revert InvalidBasisNumerator();\\n\\n        basisNumerator = _basisNumerator;\\n\\n        emit BasisNumeratorUpdated(_basisNumerator);\\n    }\\n\\n    /**\\n     * Calculates whether a vote meets its basis.\\n     *\\n     * @param _yesVotes number of votes in favor\\n     * @param _noVotes number of votes against\\n     * @return bool whether the yes votes meets the set basis\\n     */\\n    function meetsBasis(uint256 _yesVotes, uint256 _noVotes) public view returns (bool) {\\n        return _yesVotes > (_yesVotes + _noVotes) * basisNumerator / BASIS_DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x568d4c7f3e5de10272ec675cd745a53b414ca2e3388bfeff19d8addf9e324c7e\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/HatsProposalCreationWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IHats} from \\\"../interfaces/hats/full/IHats.sol\\\";\\n\\nabstract contract HatsProposalCreationWhitelist is OwnableUpgradeable {\\n    event HatWhitelisted(uint256 hatId);\\n    event HatRemovedFromWhitelist(uint256 hatId);\\n\\n    IHats public hatsContract;\\n\\n    /** Array to store whitelisted Hat IDs. */\\n    uint256[] public whitelistedHatIds;\\n\\n    error InvalidHatsContract();\\n    error NoHatsWhitelisted();\\n    error HatAlreadyWhitelisted();\\n    error HatNotWhitelisted();\\n\\n    /**\\n     * Sets up the contract with its initial parameters.\\n     *\\n     * @param initializeParams encoded initialization parameters:\\n     * `address _hatsContract`, `uint256[] _initialWhitelistedHats`\\n     */\\n    function setUp(bytes memory initializeParams) public virtual {\\n        (address _hatsContract, uint256[] memory _initialWhitelistedHats) = abi\\n            .decode(initializeParams, (address, uint256[]));\\n\\n        if (_hatsContract == address(0)) revert InvalidHatsContract();\\n        hatsContract = IHats(_hatsContract);\\n\\n        if (_initialWhitelistedHats.length == 0) revert NoHatsWhitelisted();\\n        for (uint256 i = 0; i < _initialWhitelistedHats.length; i++) {\\n            _whitelistHat(_initialWhitelistedHats[i]);\\n        }\\n    }\\n\\n    /**\\n     * Adds a Hat to the whitelist for proposal creation.\\n     * @param _hatId The ID of the Hat to whitelist\\n     */\\n    function whitelistHat(uint256 _hatId) external onlyOwner {\\n        _whitelistHat(_hatId);\\n    }\\n\\n    /**\\n     * Internal function to add a Hat to the whitelist.\\n     * @param _hatId The ID of the Hat to whitelist\\n     */\\n    function _whitelistHat(uint256 _hatId) internal {\\n        for (uint256 i = 0; i < whitelistedHatIds.length; i++) {\\n            if (whitelistedHatIds[i] == _hatId) revert HatAlreadyWhitelisted();\\n        }\\n        whitelistedHatIds.push(_hatId);\\n        emit HatWhitelisted(_hatId);\\n    }\\n\\n    /**\\n     * Removes a Hat from the whitelist for proposal creation.\\n     * @param _hatId The ID of the Hat to remove from the whitelist\\n     */\\n    function removeHatFromWhitelist(uint256 _hatId) external onlyOwner {\\n        bool found = false;\\n        for (uint256 i = 0; i < whitelistedHatIds.length; i++) {\\n            if (whitelistedHatIds[i] == _hatId) {\\n                whitelistedHatIds[i] = whitelistedHatIds[\\n                    whitelistedHatIds.length - 1\\n                ];\\n                whitelistedHatIds.pop();\\n                found = true;\\n                break;\\n            }\\n        }\\n        if (!found) revert HatNotWhitelisted();\\n\\n        emit HatRemovedFromWhitelist(_hatId);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is authorized to create proposals.\\n     * @param _address The address to check for proposal creation authorization.\\n     * @return bool Returns true if the address is wearing any of the whitelisted Hats, false otherwise.\\n     * @notice This function overrides the isProposer function from the parent contract.\\n     * It iterates through all whitelisted Hat IDs and checks if the given address\\n     * is wearing any of them using the Hats Protocol.\\n     */\\n    function isProposer(address _address) public view virtual returns (bool) {\\n        for (uint256 i = 0; i < whitelistedHatIds.length; i++) {\\n            if (hatsContract.isWearerOfHat(_address, whitelistedHatIds[i])) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * Returns the number of whitelisted hats.\\n     * @return The number of whitelisted hats\\n     */\\n    function getWhitelistedHatsCount() public view returns (uint256) {\\n        return whitelistedHatIds.length;\\n    }\\n\\n    /**\\n     * Checks if a hat is whitelisted.\\n     * @param _hatId The ID of the Hat to check\\n     * @return True if the hat is whitelisted, false otherwise\\n     */\\n    function isHatWhitelisted(uint256 _hatId) public view returns (bool) {\\n        for (uint256 i = 0; i < whitelistedHatIds.length; i++) {\\n            if (whitelistedHatIds[i] == _hatId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xa5696079ca64c569d3a648538649fcfa335609b65c328013bd5ff2aa51acc560\",\"license\":\"MIT\"},\"contracts/azorius/LinearERC20VotingExtensible.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport {IVotes} from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\nimport {BaseStrategy, IBaseStrategy} from \\\"./BaseStrategy.sol\\\";\\nimport {BaseQuorumPercent} from \\\"./BaseQuorumPercent.sol\\\";\\nimport {BaseVotingBasisPercent} from \\\"./BaseVotingBasisPercent.sol\\\";\\n\\n/**\\n * An [Azorius](./Azorius.md) [BaseStrategy](./BaseStrategy.md) implementation that\\n * enables linear (i.e. 1 to 1) token voting. Each token delegated to a given address\\n * in an `ERC20Votes` token equals 1 vote for a Proposal.\\n *\\n * This contract is an extensible version of LinearERC20Voting, with all functions\\n * marked as `virtual`. This allows other contracts to inherit from it and override\\n * any part of its functionality. The existence of this contract enables the creation\\n * of more specialized voting strategies that build upon the basic linear ERC20 voting\\n * mechanism while allowing for customization of specific aspects as needed.\\n */\\nabstract contract LinearERC20VotingExtensible is\\n    BaseStrategy,\\n    BaseQuorumPercent,\\n    BaseVotingBasisPercent\\n{\\n    /**\\n     * The voting options for a Proposal.\\n     */\\n    enum VoteType {\\n        NO, // disapproves of executing the Proposal\\n        YES, // approves of executing the Proposal\\n        ABSTAIN // neither YES nor NO, i.e. voting \\\"present\\\"\\n    }\\n\\n    /**\\n     * Defines the current state of votes on a particular Proposal.\\n     */\\n    struct ProposalVotes {\\n        uint32 votingStartBlock; // block that voting starts at\\n        uint32 votingEndBlock; // block that voting ends\\n        uint256 noVotes; // current number of NO votes for the Proposal\\n        uint256 yesVotes; // current number of YES votes for the Proposal\\n        uint256 abstainVotes; // current number of ABSTAIN votes for the Proposal\\n        mapping(address => bool) hasVoted; // whether a given address has voted yet or not\\n    }\\n\\n    IVotes public governanceToken;\\n\\n    /** Number of blocks a new Proposal can be voted on. */\\n    uint32 public votingPeriod;\\n\\n    /** Voting weight required to be able to submit Proposals. */\\n    uint256 public requiredProposerWeight;\\n\\n    /** `proposalId` to `ProposalVotes`, the voting state of a Proposal. */\\n    mapping(uint256 => ProposalVotes) internal proposalVotes;\\n\\n    event VotingPeriodUpdated(uint32 votingPeriod);\\n    event RequiredProposerWeightUpdated(uint256 requiredProposerWeight);\\n    event ProposalInitialized(uint32 proposalId, uint32 votingEndBlock);\\n    event Voted(\\n        address voter,\\n        uint32 proposalId,\\n        uint8 voteType,\\n        uint256 weight\\n    );\\n\\n    error InvalidProposal();\\n    error VotingEnded();\\n    error AlreadyVoted();\\n    error InvalidVote();\\n    error InvalidTokenAddress();\\n\\n    /**\\n     * Sets up the contract with its initial parameters.\\n     *\\n     * @param initializeParams encoded initialization parameters: `address _owner`,\\n     * `IVotes _governanceToken`, `address _azoriusModule`, `uint32 _votingPeriod`,\\n     * `uint256 _requiredProposerWeight`, `uint256 _quorumNumerator`,\\n     * `uint256 _basisNumerator`\\n     */\\n    function setUp(\\n        bytes memory initializeParams\\n    ) public virtual override initializer {\\n        (\\n            address _owner,\\n            IVotes _governanceToken,\\n            address _azoriusModule,\\n            uint32 _votingPeriod,\\n            uint256 _requiredProposerWeight,\\n            uint256 _quorumNumerator,\\n            uint256 _basisNumerator\\n        ) = abi.decode(\\n                initializeParams,\\n                (address, IVotes, address, uint32, uint256, uint256, uint256)\\n            );\\n        if (address(_governanceToken) == address(0))\\n            revert InvalidTokenAddress();\\n\\n        governanceToken = _governanceToken;\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        _setAzorius(_azoriusModule);\\n        _updateQuorumNumerator(_quorumNumerator);\\n        _updateBasisNumerator(_basisNumerator);\\n        _updateVotingPeriod(_votingPeriod);\\n        _updateRequiredProposerWeight(_requiredProposerWeight);\\n\\n        emit StrategySetUp(_azoriusModule, _owner);\\n    }\\n\\n    /**\\n     * Updates the voting time period for new Proposals.\\n     *\\n     * @param _votingPeriod voting time period (in blocks)\\n     */\\n    function updateVotingPeriod(\\n        uint32 _votingPeriod\\n    ) external virtual onlyOwner {\\n        _updateVotingPeriod(_votingPeriod);\\n    }\\n\\n    /**\\n     * Updates the voting weight required to submit new Proposals.\\n     *\\n     * @param _requiredProposerWeight required token voting weight\\n     */\\n    function updateRequiredProposerWeight(\\n        uint256 _requiredProposerWeight\\n    ) external virtual onlyOwner {\\n        _updateRequiredProposerWeight(_requiredProposerWeight);\\n    }\\n\\n    /**\\n     * Casts votes for a Proposal, equal to the caller's token delegation.\\n     *\\n     * @param _proposalId id of the Proposal to vote on\\n     * @param _voteType Proposal support as defined in VoteType (NO, YES, ABSTAIN)\\n     */\\n    function vote(uint32 _proposalId, uint8 _voteType) external virtual {\\n        _vote(\\n            _proposalId,\\n            msg.sender,\\n            _voteType,\\n            getVotingWeight(msg.sender, _proposalId)\\n        );\\n    }\\n\\n    /**\\n     * Returns the current state of the specified Proposal.\\n     *\\n     * @param _proposalId id of the Proposal\\n     * @return noVotes current count of \\\"NO\\\" votes\\n     * @return yesVotes current count of \\\"YES\\\" votes\\n     * @return abstainVotes current count of \\\"ABSTAIN\\\" votes\\n     * @return startBlock block number voting starts\\n     * @return endBlock block number voting ends\\n     */\\n    function getProposalVotes(\\n        uint32 _proposalId\\n    )\\n        external\\n        view\\n        virtual\\n        returns (\\n            uint256 noVotes,\\n            uint256 yesVotes,\\n            uint256 abstainVotes,\\n            uint32 startBlock,\\n            uint32 endBlock,\\n            uint256 votingSupply\\n        )\\n    {\\n        noVotes = proposalVotes[_proposalId].noVotes;\\n        yesVotes = proposalVotes[_proposalId].yesVotes;\\n        abstainVotes = proposalVotes[_proposalId].abstainVotes;\\n        startBlock = proposalVotes[_proposalId].votingStartBlock;\\n        endBlock = proposalVotes[_proposalId].votingEndBlock;\\n        votingSupply = getProposalVotingSupply(_proposalId);\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function initializeProposal(\\n        bytes memory _data\\n    ) public virtual override onlyAzorius {\\n        uint32 proposalId = abi.decode(_data, (uint32));\\n        uint32 _votingEndBlock = uint32(block.number) + votingPeriod;\\n\\n        proposalVotes[proposalId].votingEndBlock = _votingEndBlock;\\n        proposalVotes[proposalId].votingStartBlock = uint32(block.number);\\n\\n        emit ProposalInitialized(proposalId, _votingEndBlock);\\n    }\\n\\n    /**\\n     * Returns whether an address has voted on the specified Proposal.\\n     *\\n     * @param _proposalId id of the Proposal to check\\n     * @param _address address to check\\n     * @return bool true if the address has voted on the Proposal, otherwise false\\n     */\\n    function hasVoted(\\n        uint32 _proposalId,\\n        address _address\\n    ) public view virtual returns (bool) {\\n        return proposalVotes[_proposalId].hasVoted[_address];\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function isPassed(\\n        uint32 _proposalId\\n    ) public view virtual override returns (bool) {\\n        return (block.number > proposalVotes[_proposalId].votingEndBlock && // voting period has ended\\n            meetsQuorum(\\n                getProposalVotingSupply(_proposalId),\\n                proposalVotes[_proposalId].yesVotes,\\n                proposalVotes[_proposalId].abstainVotes\\n            ) && // yes + abstain votes meets the quorum\\n            meetsBasis(\\n                proposalVotes[_proposalId].yesVotes,\\n                proposalVotes[_proposalId].noVotes\\n            )); // yes votes meets the basis\\n    }\\n\\n    /**\\n     * Returns a snapshot of total voting supply for a given Proposal.  Because token supplies can change,\\n     * it is necessary to calculate quorum from the supply available at the time of the Proposal's creation,\\n     * not when it is being voted on passes / fails.\\n     *\\n     * @param _proposalId id of the Proposal\\n     * @return uint256 voting supply snapshot for the given _proposalId\\n     */\\n    function getProposalVotingSupply(\\n        uint32 _proposalId\\n    ) public view virtual returns (uint256) {\\n        return\\n            governanceToken.getPastTotalSupply(\\n                proposalVotes[_proposalId].votingStartBlock\\n            );\\n    }\\n\\n    /**\\n     * Calculates the voting weight an address has for a specific Proposal.\\n     *\\n     * @param _voter address of the voter\\n     * @param _proposalId id of the Proposal\\n     * @return uint256 the address' voting weight\\n     */\\n    function getVotingWeight(\\n        address _voter,\\n        uint32 _proposalId\\n    ) public view virtual returns (uint256) {\\n        return\\n            governanceToken.getPastVotes(\\n                _voter,\\n                proposalVotes[_proposalId].votingStartBlock\\n            );\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function isProposer(\\n        address _address\\n    ) public view virtual override returns (bool) {\\n        return\\n            governanceToken.getPastVotes(_address, block.number - 1) >=\\n            requiredProposerWeight;\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function votingEndBlock(\\n        uint32 _proposalId\\n    ) public view virtual override returns (uint32) {\\n        return proposalVotes[_proposalId].votingEndBlock;\\n    }\\n\\n    /** Internal implementation of `updateVotingPeriod`. */\\n    function _updateVotingPeriod(uint32 _votingPeriod) internal virtual {\\n        votingPeriod = _votingPeriod;\\n        emit VotingPeriodUpdated(_votingPeriod);\\n    }\\n\\n    /** Internal implementation of `updateRequiredProposerWeight`. */\\n    function _updateRequiredProposerWeight(\\n        uint256 _requiredProposerWeight\\n    ) internal virtual {\\n        requiredProposerWeight = _requiredProposerWeight;\\n        emit RequiredProposerWeightUpdated(_requiredProposerWeight);\\n    }\\n\\n    /**\\n     * Internal function for casting a vote on a Proposal.\\n     *\\n     * @param _proposalId id of the Proposal\\n     * @param _voter address casting the vote\\n     * @param _voteType vote support, as defined in VoteType\\n     * @param _weight amount of voting weight cast, typically the\\n     *          total number of tokens delegated\\n     */\\n    function _vote(\\n        uint32 _proposalId,\\n        address _voter,\\n        uint8 _voteType,\\n        uint256 _weight\\n    ) internal virtual {\\n        if (proposalVotes[_proposalId].votingEndBlock == 0)\\n            revert InvalidProposal();\\n        if (block.number > proposalVotes[_proposalId].votingEndBlock)\\n            revert VotingEnded();\\n        if (proposalVotes[_proposalId].hasVoted[_voter]) revert AlreadyVoted();\\n\\n        proposalVotes[_proposalId].hasVoted[_voter] = true;\\n\\n        if (_voteType == uint8(VoteType.NO)) {\\n            proposalVotes[_proposalId].noVotes += _weight;\\n        } else if (_voteType == uint8(VoteType.YES)) {\\n            proposalVotes[_proposalId].yesVotes += _weight;\\n        } else if (_voteType == uint8(VoteType.ABSTAIN)) {\\n            proposalVotes[_proposalId].abstainVotes += _weight;\\n        } else {\\n            revert InvalidVote();\\n        }\\n\\n        emit Voted(_voter, _proposalId, _voteType, _weight);\\n    }\\n\\n    /** @inheritdoc BaseQuorumPercent*/\\n    function quorumVotes(\\n        uint32 _proposalId\\n    ) public view virtual override returns (uint256) {\\n        return\\n            (quorumNumerator * getProposalVotingSupply(_proposalId)) /\\n            QUORUM_DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x250ed3053dc97247da6124fc9611c575ba05d4b8e61d2b583d8c8e47e27fbc96\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport {LinearERC20VotingExtensible} from \\\"./LinearERC20VotingExtensible.sol\\\";\\nimport {HatsProposalCreationWhitelist} from \\\"./HatsProposalCreationWhitelist.sol\\\";\\nimport {IHats} from \\\"../interfaces/hats/IHats.sol\\\";\\n\\n/**\\n * An [Azorius](./Azorius.md) [BaseStrategy](./BaseStrategy.md) implementation that\\n * enables linear (i.e. 1 to 1) ERC21 based token voting, with proposal creation\\n * restricted to users wearing whitelisted Hats.\\n */\\ncontract LinearERC20VotingWithHatsProposalCreation is\\n    HatsProposalCreationWhitelist,\\n    LinearERC20VotingExtensible\\n{\\n    /**\\n     * Sets up the contract with its initial parameters.\\n     *\\n     * @param initializeParams encoded initialization parameters: `address _owner`,\\n     * `address _governanceToken`, `address _azoriusModule`, `uint32 _votingPeriod`,\\n     * `uint256 _quorumNumerator`, `uint256 _basisNumerator`, `address _hatsContract`,\\n     * `uint256[] _initialWhitelistedHats`\\n     */\\n    function setUp(\\n        bytes memory initializeParams\\n    )\\n        public\\n        override(HatsProposalCreationWhitelist, LinearERC20VotingExtensible)\\n    {\\n        (\\n            address _owner,\\n            address _governanceToken,\\n            address _azoriusModule,\\n            uint32 _votingPeriod,\\n            uint256 _quorumNumerator,\\n            uint256 _basisNumerator,\\n            address _hatsContract,\\n            uint256[] memory _initialWhitelistedHats\\n        ) = abi.decode(\\n                initializeParams,\\n                (\\n                    address,\\n                    address,\\n                    address,\\n                    uint32,\\n                    uint256,\\n                    uint256,\\n                    address,\\n                    uint256[]\\n                )\\n            );\\n\\n        LinearERC20VotingExtensible.setUp(\\n            abi.encode(\\n                _owner,\\n                _governanceToken,\\n                _azoriusModule,\\n                _votingPeriod,\\n                0, // requiredProposerWeight is zero because we only care about the hat check\\n                _quorumNumerator,\\n                _basisNumerator\\n            )\\n        );\\n\\n        HatsProposalCreationWhitelist.setUp(\\n            abi.encode(_hatsContract, _initialWhitelistedHats)\\n        );\\n    }\\n\\n    /** @inheritdoc HatsProposalCreationWhitelist*/\\n    function isProposer(\\n        address _address\\n    )\\n        public\\n        view\\n        override(HatsProposalCreationWhitelist, LinearERC20VotingExtensible)\\n        returns (bool)\\n    {\\n        return HatsProposalCreationWhitelist.isProposer(_address);\\n    }\\n}\\n\",\"keccak256\":\"0xafc4d8b957064b487a873e11f877633553fcc8b475382cb96a08ff633c6b4c7b\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/interfaces/IAzorius.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { Enum } from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\n/**\\n * The base interface for the Azorius governance Safe module.\\n * Azorius conforms to the Zodiac pattern for Safe modules: https://github.com/gnosis/zodiac\\n *\\n * Azorius manages the state of Proposals submitted to a DAO, along with the associated strategies\\n * ([BaseStrategy](../BaseStrategy.md)) for voting that are enabled on the DAO.\\n *\\n * Any given DAO can support multiple voting BaseStrategies, and these strategies are intended to be\\n * as customizable as possible.\\n *\\n * Proposals begin in the `ACTIVE` state and will ultimately end in either\\n * the `EXECUTED`, `EXPIRED`, or `FAILED` state.\\n *\\n * `ACTIVE` - a new proposal begins in this state, and stays in this state\\n *          for the duration of its voting period.\\n *\\n * `TIMELOCKED` - A proposal that passes enters the `TIMELOCKED` state, during which\\n *          it cannot yet be executed.  This is to allow time for token holders\\n *          to potentially exit their position, as well as parent DAOs time to\\n *          initiate a freeze, if they choose to do so. A proposal stays timelocked\\n *          for the duration of its `timelockPeriod`.\\n *\\n * `EXECUTABLE` - Following the `TIMELOCKED` state, a passed proposal becomes `EXECUTABLE`,\\n *          and can then finally be executed on chain by anyone.\\n *\\n * `EXECUTED` - the final state for a passed proposal.  The proposal has been executed\\n *          on the blockchain.\\n *\\n * `EXPIRED` - a passed proposal which is not executed before its `executionPeriod` has\\n *          elapsed will be `EXPIRED`, and can no longer be executed.\\n *\\n * `FAILED` - a failed proposal (as defined by its [BaseStrategy](../BaseStrategy.md) \\n *          `isPassed` function). For a basic strategy, this would mean it received more \\n *          NO votes than YES or did not achieve quorum. \\n */\\ninterface IAzorius {\\n\\n    /** Represents a transaction to perform on the blockchain. */\\n    struct Transaction {\\n        address to; // destination address of the transaction\\n        uint256 value; // amount of ETH to transfer with the transaction\\n        bytes data; // encoded function call data of the transaction\\n        Enum.Operation operation; // Operation type, Call or DelegateCall\\n    }\\n\\n    /** Holds details pertaining to a single proposal. */\\n    struct Proposal {\\n        uint32 executionCounter; // count of transactions that have been executed within the proposal\\n        uint32 timelockPeriod; // time (in blocks) this proposal will be timelocked for if it passes\\n        uint32 executionPeriod; // time (in blocks) this proposal has to be executed after timelock ends before it is expired\\n        address strategy; // BaseStrategy contract this proposal was created on\\n        bytes32[] txHashes; // hashes of the transactions that are being proposed\\n    }\\n\\n    /** The list of states in which a Proposal can be in at any given time. */\\n    enum ProposalState {\\n        ACTIVE,\\n        TIMELOCKED,\\n        EXECUTABLE,\\n        EXECUTED,\\n        EXPIRED,\\n        FAILED\\n    }\\n\\n    /**\\n     * Enables a [BaseStrategy](../BaseStrategy.md) implementation for newly created Proposals.\\n     *\\n     * Multiple strategies can be enabled, and new Proposals will be able to be\\n     * created using any of the currently enabled strategies.\\n     *\\n     * @param _strategy contract address of the BaseStrategy to be enabled\\n     */\\n    function enableStrategy(address _strategy) external;\\n\\n    /**\\n     * Disables a previously enabled [BaseStrategy](../BaseStrategy.md) implementation for new proposals.\\n     * This has no effect on existing Proposals, either `ACTIVE` or completed.\\n     *\\n     * @param _prevStrategy BaseStrategy address that pointed in the linked list to the strategy to be removed\\n     * @param _strategy address of the BaseStrategy to be removed\\n     */\\n    function disableStrategy(address _prevStrategy, address _strategy) external;\\n\\n    /**\\n     * Updates the `timelockPeriod` for newly created Proposals.\\n     * This has no effect on existing Proposals, either `ACTIVE` or completed.\\n     *\\n     * @param _timelockPeriod timelockPeriod (in blocks) to be used for new Proposals\\n     */\\n    function updateTimelockPeriod(uint32 _timelockPeriod) external;\\n\\n    /**\\n     * Updates the execution period for future Proposals.\\n     *\\n     * @param _executionPeriod new execution period (in blocks)\\n     */\\n    function updateExecutionPeriod(uint32 _executionPeriod) external;\\n\\n    /**\\n     * Submits a new Proposal, using one of the enabled [BaseStrategies](../BaseStrategy.md).\\n     * New Proposals begin immediately in the `ACTIVE` state.\\n     *\\n     * @param _strategy address of the BaseStrategy implementation which the Proposal will use\\n     * @param _data arbitrary data passed to the BaseStrategy implementation. This may not be used by all strategies, \\n     * but is included in case future strategy contracts have a need for it\\n     * @param _transactions array of transactions to propose\\n     * @param _metadata additional data such as a title/description to submit with the proposal\\n     */\\n    function submitProposal(\\n        address _strategy,\\n        bytes memory _data,\\n        Transaction[] calldata _transactions,\\n        string calldata _metadata\\n    ) external;\\n\\n    /**\\n     * Executes all transactions within a Proposal.\\n     * This will only be able to be called if the Proposal passed.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @param _targets target contracts for each transaction\\n     * @param _values ETH values to be sent with each transaction\\n     * @param _data transaction data to be executed\\n     * @param _operations Calls or Delegatecalls\\n     */\\n    function executeProposal(\\n        uint32 _proposalId,\\n        address[] memory _targets,\\n        uint256[] memory _values,\\n        bytes[] memory _data,\\n        Enum.Operation[] memory _operations\\n    ) external;\\n\\n    /**\\n     * Returns whether a [BaseStrategy](../BaseStrategy.md) implementation is enabled.\\n     *\\n     * @param _strategy contract address of the BaseStrategy to check\\n     * @return bool True if the strategy is enabled, otherwise False\\n     */\\n    function isStrategyEnabled(address _strategy) external view returns (bool);\\n\\n    /**\\n     * Returns an array of enabled [BaseStrategy](../BaseStrategy.md) contract addresses.\\n     * Because the list of BaseStrategies is technically unbounded, this\\n     * requires the address of the first strategy you would like, along\\n     * with the total count of strategies to return, rather than\\n     * returning the whole list at once.\\n     *\\n     * @param _startAddress contract address of the BaseStrategy to start with\\n     * @param _count maximum number of BaseStrategies that should be returned\\n     * @return _strategies array of BaseStrategies\\n     * @return _next next BaseStrategy contract address in the linked list\\n     */\\n    function getStrategies(\\n        address _startAddress,\\n        uint256 _count\\n    ) external view returns (address[] memory _strategies, address _next);\\n\\n    /**\\n     * Gets the state of a Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @return ProposalState uint256 ProposalState enum value representing the\\n     *         current state of the proposal\\n     */\\n    function proposalState(uint32 _proposalId) external view returns (ProposalState);\\n\\n    /**\\n     * Generates the data for the module transaction hash (required for signing).\\n     *\\n     * @param _to target address of the transaction\\n     * @param _value ETH value to send with the transaction\\n     * @param _data encoded function call data of the transaction\\n     * @param _operation Enum.Operation to use for the transaction\\n     * @param _nonce Safe nonce of the transaction\\n     * @return bytes hashed transaction data\\n     */\\n    function generateTxHashData(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        Enum.Operation _operation,\\n        uint256 _nonce\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * Returns the `keccak256` hash of the specified transaction.\\n     *\\n     * @param _to target address of the transaction\\n     * @param _value ETH value to send with the transaction\\n     * @param _data encoded function call data of the transaction\\n     * @param _operation Enum.Operation to use for the transaction\\n     * @return bytes32 transaction hash\\n     */\\n    function getTxHash(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        Enum.Operation _operation\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Returns the hash of a transaction in a Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @param _txIndex index of the transaction within the Proposal\\n     * @return bytes32 hash of the specified transaction\\n     */\\n    function getProposalTxHash(uint32 _proposalId, uint32 _txIndex) external view returns (bytes32);\\n\\n    /**\\n     * Returns the transaction hashes associated with a given `proposalId`.\\n     *\\n     * @param _proposalId identifier of the Proposal to get transaction hashes for\\n     * @return bytes32[] array of transaction hashes\\n     */\\n    function getProposalTxHashes(uint32 _proposalId) external view returns (bytes32[] memory);\\n\\n    /**\\n     * Returns details about the specified Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @return _strategy address of the BaseStrategy contract the Proposal is on\\n     * @return _txHashes hashes of the transactions the Proposal contains\\n     * @return _timelockPeriod time (in blocks) the Proposal is timelocked for\\n     * @return _executionPeriod time (in blocks) the Proposal must be executed within, after timelock ends\\n     * @return _executionCounter counter of how many of the Proposals transactions have been executed\\n     */\\n    function getProposal(uint32 _proposalId) external view\\n        returns (\\n            address _strategy,\\n            bytes32[] memory _txHashes,\\n            uint32 _timelockPeriod,\\n            uint32 _executionPeriod,\\n            uint32 _executionCounter\\n        );\\n}\\n\",\"keccak256\":\"0x1a656aacd0b0f11dec2b92d70153dc3a1b7019e9f76dd43f7c91a21fb8cfef3d\",\"license\":\"MIT\"},\"contracts/azorius/interfaces/IBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\n/**\\n * The specification for a voting strategy in Azorius.\\n *\\n * Each IBaseStrategy implementation need only implement the given functions here,\\n * which allows for highly composable but simple or complex voting strategies.\\n *\\n * It should be noted that while many voting strategies make use of parameters such as\\n * voting period or quorum, that is a detail of the individual strategy itself, and not\\n * a requirement for the Azorius protocol.\\n */\\ninterface IBaseStrategy {\\n\\n    /**\\n     * Sets the address of the [Azorius](../Azorius.md) contract this \\n     * [BaseStrategy](../BaseStrategy.md) is being used on.\\n     *\\n     * @param _azoriusModule address of the Azorius Safe module\\n     */\\n    function setAzorius(address _azoriusModule) external;\\n\\n    /**\\n     * Called by the [Azorius](../Azorius.md) module. This notifies this \\n     * [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created.\\n     *\\n     * @param _data arbitrary data to pass to this BaseStrategy\\n     */\\n    function initializeProposal(bytes memory _data) external;\\n\\n    /**\\n     * Returns whether a Proposal has been passed.\\n     *\\n     * @param _proposalId proposalId to check\\n     * @return bool true if the proposal has passed, otherwise false\\n     */\\n    function isPassed(uint32 _proposalId) external view returns (bool);\\n\\n    /**\\n     * Returns whether the specified address can submit a Proposal with\\n     * this [BaseStrategy](../BaseStrategy.md).\\n     *\\n     * This allows a BaseStrategy to place any limits it would like on\\n     * who can create new Proposals, such as requiring a minimum token\\n     * delegation.\\n     *\\n     * @param _address address to check\\n     * @return bool true if the address can submit a Proposal, otherwise false\\n     */\\n    function isProposer(address _address) external view returns (bool);\\n\\n    /**\\n     * Returns the block number voting ends on a given Proposal.\\n     *\\n     * @param _proposalId proposalId to check\\n     * @return uint32 block number when voting ends on the Proposal\\n     */\\n    function votingEndBlock(uint32 _proposalId) external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x5ad8cdea65caa49f4116c67ebcbc12094676ac64d70c35643a4cc517c8b220fe\",\"license\":\"LGPL-3.0-only\"},\"contracts/interfaces/hats/IHats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface IHats {\\n    function mintTopHat(\\n        address _target,\\n        string memory _details,\\n        string memory _imageURI\\n    ) external returns (uint256 topHatId);\\n\\n    function createHat(\\n        uint256 _admin,\\n        string calldata _details,\\n        uint32 _maxSupply,\\n        address _eligibility,\\n        address _toggle,\\n        bool _mutable,\\n        string calldata _imageURI\\n    ) external returns (uint256 newHatId);\\n\\n    function mintHat(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool success);\\n\\n    function transferHat(uint256 _hatId, address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0x8e35022f5c0fcf0059033abec78ec890f0cf3bbac09d6d24051cff9679239511\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/full/HatsErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface HatsErrors {\\n    /// @notice Emitted when `user` is attempting to perform an action on `hatId` but is not wearing one of `hatId`'s admin hats\\n    /// @dev Can be equivalent to `NotHatWearer(buildHatId(hatId))`, such as when emitted by `approveLinkTopHatToTree` or `relinkTopHatToTree`\\n    error NotAdmin(address user, uint256 hatId);\\n\\n    /// @notice Emitted when attempting to perform an action as or for an account that is not a wearer of a given hat\\n    error NotHatWearer();\\n\\n    /// @notice Emitted when attempting to perform an action that requires being either an admin or wearer of a given hat\\n    error NotAdminOrWearer();\\n\\n    /// @notice Emitted when attempting to mint `hatId` but `hatId`'s maxSupply has been reached\\n    error AllHatsWorn(uint256 hatId);\\n\\n    /// @notice Emitted when attempting to create a hat with a level 14 hat as its admin\\n    error MaxLevelsReached();\\n\\n    /// @notice Emitted when an attempted hat id has empty intermediate level(s)\\n    error InvalidHatId();\\n\\n    /// @notice Emitted when attempting to mint `hatId` to a `wearer` who is already wearing the hat\\n    error AlreadyWearingHat(address wearer, uint256 hatId);\\n\\n    /// @notice Emitted when attempting to mint a non-existant hat\\n    error HatDoesNotExist(uint256 hatId);\\n\\n    /// @notice Emmitted when attempting to mint or transfer a hat that is not active\\n    error HatNotActive();\\n\\n    /// @notice Emitted when attempting to mint or transfer a hat to an ineligible wearer\\n    error NotEligible();\\n\\n    /// @notice Emitted when attempting to check or set a hat's status from an account that is not that hat's toggle module\\n    error NotHatsToggle();\\n\\n    /// @notice Emitted when attempting to check or set a hat wearer's status from an account that is not that hat's eligibility module\\n    error NotHatsEligibility();\\n\\n    /// @notice Emitted when array arguments to a batch function have mismatching lengths\\n    error BatchArrayLengthMismatch();\\n\\n    /// @notice Emitted when attempting to mutate or transfer an immutable hat\\n    error Immutable();\\n\\n    /// @notice Emitted when attempting to change a hat's maxSupply to a value lower than its current supply\\n    error NewMaxSupplyTooLow();\\n\\n    /// @notice Emitted when attempting to link a tophat to a new admin for which the tophat serves as an admin\\n    error CircularLinkage();\\n\\n    /// @notice Emitted when attempting to link or relink a tophat to a separate tree\\n    error CrossTreeLinkage();\\n\\n    /// @notice Emitted when attempting to link a tophat without a request\\n    error LinkageNotRequested();\\n\\n    /// @notice Emitted when attempting to unlink a tophat that does not have a wearer\\n    /// @dev This ensures that unlinking never results in a bricked tophat\\n    error InvalidUnlink();\\n\\n    /// @notice Emmited when attempting to change a hat's eligibility or toggle module to the zero address\\n    error ZeroAddress();\\n\\n    /// @notice Emmitted when attempting to change a hat's details or imageURI to a string with over 7000 bytes (~characters)\\n    /// @dev This protects against a DOS attack where an admin iteratively extend's a hat's details or imageURI\\n    ///      to be so long that reading it exceeds the block gas limit, breaking `uri()` and `viewHat()`\\n    error StringTooLong();\\n}\\n\",\"keccak256\":\"0x81b0056b7bed86eabc07c0e4a9655c586ddb8e6c128320593669b76efd5a08de\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/full/HatsEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface HatsEvents {\\n    /// @notice Emitted when a new hat is created\\n    /// @param id The id for the new hat\\n    /// @param details A description of the Hat\\n    /// @param maxSupply The total instances of the Hat that can be worn at once\\n    /// @param eligibility The address that can report on the Hat wearer's status\\n    /// @param toggle The address that can deactivate the Hat\\n    /// @param mutable_ Whether the hat's properties are changeable after creation\\n    /// @param imageURI The image uri for this hat and the fallback for its\\n    event HatCreated(\\n        uint256 id,\\n        string details,\\n        uint32 maxSupply,\\n        address eligibility,\\n        address toggle,\\n        bool mutable_,\\n        string imageURI\\n    );\\n\\n    /// @notice Emitted when a hat wearer's standing is updated\\n    /// @dev Eligibility is excluded since the source of truth for eligibility is the eligibility module and may change without a transaction\\n    /// @param hatId The id of the wearer's hat\\n    /// @param wearer The wearer's address\\n    /// @param wearerStanding Whether the wearer is in good standing for the hat\\n    event WearerStandingChanged(\\n        uint256 hatId,\\n        address wearer,\\n        bool wearerStanding\\n    );\\n\\n    /// @notice Emitted when a hat's status is updated\\n    /// @param hatId The id of the hat\\n    /// @param newStatus Whether the hat is active\\n    event HatStatusChanged(uint256 hatId, bool newStatus);\\n\\n    /// @notice Emitted when a hat's details are updated\\n    /// @param hatId The id of the hat\\n    /// @param newDetails The updated details\\n    event HatDetailsChanged(uint256 hatId, string newDetails);\\n\\n    /// @notice Emitted when a hat's eligibility module is updated\\n    /// @param hatId The id of the hat\\n    /// @param newEligibility The updated eligibiliy module\\n    event HatEligibilityChanged(uint256 hatId, address newEligibility);\\n\\n    /// @notice Emitted when a hat's toggle module is updated\\n    /// @param hatId The id of the hat\\n    /// @param newToggle The updated toggle module\\n    event HatToggleChanged(uint256 hatId, address newToggle);\\n\\n    /// @notice Emitted when a hat's mutability is updated\\n    /// @param hatId The id of the hat\\n    event HatMutabilityChanged(uint256 hatId);\\n\\n    /// @notice Emitted when a hat's maximum supply is updated\\n    /// @param hatId The id of the hat\\n    /// @param newMaxSupply The updated max supply\\n    event HatMaxSupplyChanged(uint256 hatId, uint32 newMaxSupply);\\n\\n    /// @notice Emitted when a hat's image URI is updated\\n    /// @param hatId The id of the hat\\n    /// @param newImageURI The updated image URI\\n    event HatImageURIChanged(uint256 hatId, string newImageURI);\\n\\n    /// @notice Emitted when a tophat linkage is requested by its admin\\n    /// @param domain The domain of the tree tophat to link\\n    /// @param newAdmin The tophat's would-be admin in the parent tree\\n    event TopHatLinkRequested(uint32 domain, uint256 newAdmin);\\n\\n    /// @notice Emitted when a tophat is linked to a another tree\\n    /// @param domain The domain of the newly-linked tophat\\n    /// @param newAdmin The tophat's new admin in the parent tree\\n    event TopHatLinked(uint32 domain, uint256 newAdmin);\\n}\\n\",\"keccak256\":\"0x53413397d15e1636c3cd7bd667656b79bc2886785403b824bcd4ed122667f2c6\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/full/IHats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\nimport \\\"./IHatsIdUtilities.sol\\\";\\nimport \\\"./HatsErrors.sol\\\";\\nimport \\\"./HatsEvents.sol\\\";\\n\\ninterface IHats is IHatsIdUtilities, HatsErrors, HatsEvents {\\n    function mintTopHat(\\n        address _target,\\n        string memory _details,\\n        string memory _imageURI\\n    ) external returns (uint256 topHatId);\\n\\n    function createHat(\\n        uint256 _admin,\\n        string calldata _details,\\n        uint32 _maxSupply,\\n        address _eligibility,\\n        address _toggle,\\n        bool _mutable,\\n        string calldata _imageURI\\n    ) external returns (uint256 newHatId);\\n\\n    function batchCreateHats(\\n        uint256[] calldata _admins,\\n        string[] calldata _details,\\n        uint32[] calldata _maxSupplies,\\n        address[] memory _eligibilityModules,\\n        address[] memory _toggleModules,\\n        bool[] calldata _mutables,\\n        string[] calldata _imageURIs\\n    ) external returns (bool success);\\n\\n    function getNextId(uint256 _admin) external view returns (uint256 nextId);\\n\\n    function mintHat(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool success);\\n\\n    function batchMintHats(\\n        uint256[] calldata _hatIds,\\n        address[] calldata _wearers\\n    ) external returns (bool success);\\n\\n    function setHatStatus(\\n        uint256 _hatId,\\n        bool _newStatus\\n    ) external returns (bool toggled);\\n\\n    function checkHatStatus(uint256 _hatId) external returns (bool toggled);\\n\\n    function setHatWearerStatus(\\n        uint256 _hatId,\\n        address _wearer,\\n        bool _eligible,\\n        bool _standing\\n    ) external returns (bool updated);\\n\\n    function checkHatWearerStatus(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool updated);\\n\\n    function renounceHat(uint256 _hatId) external;\\n\\n    function transferHat(uint256 _hatId, address _from, address _to) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              HATS ADMIN FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function makeHatImmutable(uint256 _hatId) external;\\n\\n    function changeHatDetails(\\n        uint256 _hatId,\\n        string memory _newDetails\\n    ) external;\\n\\n    function changeHatEligibility(\\n        uint256 _hatId,\\n        address _newEligibility\\n    ) external;\\n\\n    function changeHatToggle(uint256 _hatId, address _newToggle) external;\\n\\n    function changeHatImageURI(\\n        uint256 _hatId,\\n        string memory _newImageURI\\n    ) external;\\n\\n    function changeHatMaxSupply(uint256 _hatId, uint32 _newMaxSupply) external;\\n\\n    function requestLinkTopHatToTree(\\n        uint32 _topHatId,\\n        uint256 _newAdminHat\\n    ) external;\\n\\n    function approveLinkTopHatToTree(\\n        uint32 _topHatId,\\n        uint256 _newAdminHat,\\n        address _eligibility,\\n        address _toggle,\\n        string calldata _details,\\n        string calldata _imageURI\\n    ) external;\\n\\n    function unlinkTopHatFromTree(uint32 _topHatId, address _wearer) external;\\n\\n    function relinkTopHatWithinTree(\\n        uint32 _topHatDomain,\\n        uint256 _newAdminHat,\\n        address _eligibility,\\n        address _toggle,\\n        string calldata _details,\\n        string calldata _imageURI\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function viewHat(\\n        uint256 _hatId\\n    )\\n        external\\n        view\\n        returns (\\n            string memory details,\\n            uint32 maxSupply,\\n            uint32 supply,\\n            address eligibility,\\n            address toggle,\\n            string memory imageURI,\\n            uint16 lastHatId,\\n            bool mutable_,\\n            bool active\\n        );\\n\\n    function isWearerOfHat(\\n        address _user,\\n        uint256 _hatId\\n    ) external view returns (bool isWearer);\\n\\n    function isAdminOfHat(\\n        address _user,\\n        uint256 _hatId\\n    ) external view returns (bool isAdmin);\\n\\n    function isInGoodStanding(\\n        address _wearer,\\n        uint256 _hatId\\n    ) external view returns (bool standing);\\n\\n    function isEligible(\\n        address _wearer,\\n        uint256 _hatId\\n    ) external view returns (bool eligible);\\n\\n    function getHatEligibilityModule(\\n        uint256 _hatId\\n    ) external view returns (address eligibility);\\n\\n    function getHatToggleModule(\\n        uint256 _hatId\\n    ) external view returns (address toggle);\\n\\n    function getHatMaxSupply(\\n        uint256 _hatId\\n    ) external view returns (uint32 maxSupply);\\n\\n    function hatSupply(uint256 _hatId) external view returns (uint32 supply);\\n\\n    function getImageURIForHat(\\n        uint256 _hatId\\n    ) external view returns (string memory _uri);\\n\\n    function balanceOf(\\n        address wearer,\\n        uint256 hatId\\n    ) external view returns (uint256 balance);\\n\\n    function balanceOfBatch(\\n        address[] calldata _wearers,\\n        uint256[] calldata _hatIds\\n    ) external view returns (uint256[] memory);\\n\\n    function uri(uint256 id) external view returns (string memory _uri);\\n}\\n\",\"keccak256\":\"0x2867004bddc5148fa1937f25c0403e5d9977583aaf50fdbdb74bd463f64f21c8\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/hats/full/IHatsIdUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface IHatsIdUtilities {\\n    function buildHatId(\\n        uint256 _admin,\\n        uint16 _newHat\\n    ) external pure returns (uint256 id);\\n\\n    function getHatLevel(uint256 _hatId) external view returns (uint32 level);\\n\\n    function getLocalHatLevel(\\n        uint256 _hatId\\n    ) external pure returns (uint32 level);\\n\\n    function isTopHat(uint256 _hatId) external view returns (bool _topHat);\\n\\n    function isLocalTopHat(\\n        uint256 _hatId\\n    ) external pure returns (bool _localTopHat);\\n\\n    function isValidHatId(\\n        uint256 _hatId\\n    ) external view returns (bool validHatId);\\n\\n    function getAdminAtLevel(\\n        uint256 _hatId,\\n        uint32 _level\\n    ) external view returns (uint256 admin);\\n\\n    function getAdminAtLocalLevel(\\n        uint256 _hatId,\\n        uint32 _level\\n    ) external pure returns (uint256 admin);\\n\\n    function getTopHatDomain(\\n        uint256 _hatId\\n    ) external view returns (uint32 domain);\\n\\n    function getTippyTopHatDomain(\\n        uint32 _topHatDomain\\n    ) external view returns (uint32 domain);\\n\\n    function noCircularLinkage(\\n        uint32 _topHatDomain,\\n        uint256 _linkedAdmin\\n    ) external view returns (bool notCircular);\\n\\n    function sameTippyTopHatDomain(\\n        uint32 _topHatDomain,\\n        uint256 _newAdminHat\\n    ) external view returns (bool sameDomain);\\n}\\n\",\"keccak256\":\"0x007fcc07b20bf84bacad1f9a2ddf4e30e1a8be961e144b7bef8e98a51781aee9\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611b81806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638a2f2c8a11610125578063a7713a70116100ad578063d3c22b381161007c578063d3c22b3814610472578063deb61c15146104b6578063e8575a7f146104ff578063f2fde38b14610512578063f96dae0a1461052557600080fd5b8063a7713a701461043a578063a77a81d014610443578063bf7e2c7f14610456578063ca1dc30b1461045f57600080fd5b806397e39fef116100f457806397e39fef146103e55780639bff4df4146103f85780639dd783c214610401578063a09c4f6814610414578063a4f9edbf1461042757600080fd5b80638a2f2c8a1461039b5780638da5cb5b146103ae578063918f84bf146103bf5780639767fb72146103d257600080fd5b806350631bfe116101a85780636fef541a116101775780636fef541a1461036e578063709e23f814610378578063715018a61461038057806374ec29a0146103885780638081be911461036e57600080fd5b806350631bfe146102dc57806353a8b320146102ff57806355a9dbd91461031257806366b629551461034357600080fd5b80631e2972e8116101e45780631e2972e81461029057806333f48a5e146102a357806337938ab3146102b65780633a622c52146102c957600080fd5b806302a251a31461021657806306f3f9e61461024757806308453ad21461025c5780631236af7c1461027d575b600080fd5b606a5461022d90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61025a610255366004611532565b610538565b005b61026f61026a36600461155d565b61054c565b60405190815260200161023e565b61026f61028b36600461155d565b6105d5565b61026f61029e366004611532565b6105fb565b61025a6102b136600461155d565b61061c565b61025a6102c436600461158f565b61062d565b61025a6102d7366004611532565b61067f565b6102ef6102ea366004611532565b61079c565b604051901515815260200161023e565b6102ef61030d36600461155d565b6107f2565b61022d61032036600461155d565b63ffffffff9081166000908152606c602052604090205464010000000090041690565b606754610356906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b61026f620f424081565b60665461026f565b61025a610880565b6102ef61039636600461158f565b610894565b61025a6103a9366004611532565b61089f565b6033546001600160a01b0316610356565b6102ef6103cd3660046115ac565b6108b0565b61025a6103e03660046115ce565b6108e2565b606554610356906001600160a01b031681565b61026f606b5481565b6102ef61040f36600461160d565b6108fb565b61025a610422366004611532565b61092d565b61025a610435366004611680565b61093e565b61026f60685481565b61025a610451366004611680565b610a0a565b61026f60695481565b61026f61046d366004611715565b610af1565b6102ef610480366004611743565b63ffffffff82166000908152606c602090815260408083206001600160a01b038516845260040190915290205460ff1692915050565b6104c96104c436600461155d565b610b86565b6040805196875260208701959095529385019290925263ffffffff908116606085015216608083015260a082015260c00161023e565b61025a61050d366004611532565b610bd5565b61025a61052036600461158f565b610be6565b606a54610356906001600160a01b031681565b610540610c61565b61054981610cbb565b50565b606a5463ffffffff8281166000908152606c6020526040808220549051632394e7a360e21b815292166004830152916001600160a01b031690638e539e8c90602401602060405180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190611771565b92915050565b6000620f42406105e48361054c565b6068546105f191906117a0565b6105cf91906117b7565b6066818154811061060b57600080fd5b600091825260209091200154905081565b610624610c61565b61054981610d1b565b610635610c61565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fac8d831a6ed53a98387842e08d9e0893c1d478f4a3710b254e22bd58c06b269090600090a250565b610687610c61565b6000805b6066548110156107455782606682815481106106a9576106a96117d9565b90600052602060002001540361073357606680546106c9906001906117ef565b815481106106d9576106d96117d9565b9060005260206000200154606682815481106106f7576106f76117d9565b600091825260209091200155606680548061071457610714611802565b6001900381819060005260206000200160009055905560019150610745565b8061073d81611818565b91505061068b565b508061076457604051634b8d041f60e01b815260040160405180910390fd5b6040518281527f50544666722f5a4554f2716b5efb2ce814101451643c8856221fef06b5e9803b906020015b60405180910390a15050565b6000805b6066548110156107e95782606682815481106107be576107be6117d9565b9060005260206000200154036107d75750600192915050565b806107e181611818565b9150506107a0565b50600092915050565b63ffffffff8082166000908152606c60205260408120549091640100000000909104164311801561084f575061084f61082a8361054c565b63ffffffff84166000908152606c6020526040902060028101546003909101546108fb565b80156105cf575063ffffffff82166000908152606c6020526040902060028101546001909101546105cf91906108b0565b610888610c61565b6108926000610d6f565b565b60006105cf82610dc1565b6108a7610c61565b61054981610e93565b6000620f424060695483856108c59190611831565b6108cf91906117a0565b6108d991906117b7565b90921192915050565b6108f78233836108f23387610af1565b610ec8565b5050565b6000620f42406068548561090f91906117a0565b61091991906117b7565b6109238385611831565b1015949350505050565b610935610c61565b610549816110e7565b6000806000806000806000808880602001905181019061095e91906118c4565b604080516001600160a01b03808b166020830152808a1692820192909252908716606082015263ffffffff86166080820152600060a082015260c0810185905260e08101849052979f50959d50939b5091995097509550935091506109d590610100016040516020818303038152906040526111a9565b6109ff82826040516020016109eb929190611978565b6040516020818303038152906040526113a2565b505050505050505050565b6067546001600160a01b03163314610a35576040516358c30ce160e01b815260040160405180910390fd5b600081806020019051810190610a4b91906119ce565b606a54909150600090610a6b90600160a01b900463ffffffff16436119eb565b63ffffffff8381166000818152606c6020908152604091829020805467ffffffffffffffff191664010000000087871690810263ffffffff1916919091174390961695909517905581519283528201929092529192507f80d0ad93bba25e53bf67fa9f2d13df59f04795ec2f91b9b3c1f607666daf9d64910160405180910390a1505050565b606a5463ffffffff8281166000908152606c6020526040808220549051630748d63560e31b81526001600160a01b03878116600483015291909316602484015290921690633a46b1a890604401602060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611771565b9392505050565b63ffffffff8082166000908152606c6020526040812060018101546002820154600383015492549194909382821692640100000000900490911690610bca8761054c565b905091939550919395565b610bdd610c61565b61054981611468565b610bee610c61565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61054981610d6f565b6033546001600160a01b031633146108925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4f565b620f4240811115610cdf57604051630d2a3fcb60e41b815260040160405180910390fd5b60688190556040518181527f0cc18e3862a55e514917eb8f248561dd65e0fbbba65f5468f203e92193635dd3906020015b60405180910390a150565b606a805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f70770ce479f70673c3ed8fff63cfb758a6ffdddc30cab7c63d54c8d825e3948890602001610d10565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b6066548110156107e957606554606680546001600160a01b0390921691634352409a91869185908110610dfa57610dfa6117d9565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e739190611a0f565b15610e815750600192915050565b80610e8b81611818565b915050610dc5565b606b8190556040518181527f93deb5027728f04c9fd8d7bcea2efb36cc7a6a7876236649f2952de0aa89a01190602001610d10565b63ffffffff8085166000908152606c602052604081205464010000000090049091169003610f0957604051631dc0650160e31b815260040160405180910390fd5b63ffffffff8085166000908152606c6020526040902054640100000000900416431115610f4957604051637a19ed0560e01b815260040160405180910390fd5b63ffffffff84166000908152606c602090815260408083206001600160a01b038716845260040190915290205460ff1615610f9757604051637c9a1cf960e01b815260040160405180910390fd5b63ffffffff84166000908152606c602090815260408083206001600160a01b03871684526004019091529020805460ff1916600117905560ff82166110095763ffffffff84166000908152606c602052604081206001018054839290610ffe908490611831565b9091555061108a9050565b60001960ff83160161103d5763ffffffff84166000908152606c602052604081206002018054839290610ffe908490611831565b60011960ff8316016110715763ffffffff84166000908152606c602052604081206003018054839290610ffe908490611831565b604051636aee863360e11b815260040160405180910390fd5b604080516001600160a01b038516815263ffffffff8616602082015260ff8416818301526060810183905290517fe82b577bd384111662dd034b9114cbe59b26ea201f009d385006518ed28bed819181900360800190a150505050565b60005b606654811015611143578160668281548110611108576111086117d9565b9060005260206000200154036111315760405163634a456360e01b815260040160405180910390fd5b8061113b81611818565b9150506110ea565b50606680546001810182556000919091527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354018190556040518181527f30590a8684cec4e5a2b48765f391c996b9a004652478a8f41dc46658ccb699ed90602001610d10565b600054610100900460ff16158080156111c95750600054600160ff909116105b806111e35750303b1580156111e3575060005460ff166001145b6112465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c4f565b6000805460ff191660011790558015611269576000805461ff0019166101001790555b6000806000806000806000888060200190518101906112889190611a31565b959c50939a5091985096509450925090506001600160a01b0386166112c057604051630f58058360e11b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0388161790556112e36114d8565b6112ec87610be6565b6112f585610635565b6112fe82610cbb565b61130781611468565b61131084610d1b565b61131983610e93565b866001600160a01b0316856001600160a01b03167fca32f512f02914f6bc16a49e786443029061b9adc5a987fd2f6efa56c0116a1660405160405180910390a35050505050505080156108f7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610790565b600080828060200190518101906113b99190611aaf565b90925090506001600160a01b0382166113e5576040516350e80d4360e11b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b038416179055805160000361142257604051632a2b50e760e01b815260040160405180910390fd5b60005b815181101561146257611450828281518110611443576114436117d9565b60200260200101516110e7565b8061145a81611818565b915050611425565b50505050565b620f424081118061148557506114826002620f42406117b7565b81105b156114a3576040516302396b6b60e61b815260040160405180910390fd5b60698190556040518181527f406c076eac4d3dde1c5d55793e80239daa8c60ee971390ce3d9f90ca4206295390602001610d10565b600054610100900460ff166114ff5760405162461bcd60e51b8152600401610c4f90611b00565b610892600054610100900460ff166115295760405162461bcd60e51b8152600401610c4f90611b00565b61089233610d6f565b60006020828403121561154457600080fd5b5035919050565b63ffffffff8116811461054957600080fd5b60006020828403121561156f57600080fd5b8135610b7f8161154b565b6001600160a01b038116811461054957600080fd5b6000602082840312156115a157600080fd5b8135610b7f8161157a565b600080604083850312156115bf57600080fd5b50508035926020909101359150565b600080604083850312156115e157600080fd5b82356115ec8161154b565b9150602083013560ff8116811461160257600080fd5b809150509250929050565b60008060006060848603121561162257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561167857611678611639565b604052919050565b6000602080838503121561169357600080fd5b823567ffffffffffffffff808211156116ab57600080fd5b818501915085601f8301126116bf57600080fd5b8135818111156116d1576116d1611639565b6116e3601f8201601f1916850161164f565b915080825286848285010111156116f957600080fd5b8084840185840137600090820190930192909252509392505050565b6000806040838503121561172857600080fd5b82356117338161157a565b915060208301356116028161154b565b6000806040838503121561175657600080fd5b82356117618161154b565b915060208301356116028161157a565b60006020828403121561178357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cf576105cf61178a565b6000826117d457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b818103818111156105cf576105cf61178a565b634e487b7160e01b600052603160045260246000fd5b60006001820161182a5761182a61178a565b5060010190565b808201808211156105cf576105cf61178a565b600082601f83011261185557600080fd5b8151602067ffffffffffffffff82111561187157611871611639565b8160051b61188082820161164f565b928352848101820192828101908785111561189a57600080fd5b83870192505b848310156118b9578251825291830191908301906118a0565b979650505050505050565b600080600080600080600080610100898b0312156118e157600080fd5b88516118ec8161157a565b60208a01519098506118fd8161157a565b60408a015190975061190e8161157a565b60608a015190965061191f8161154b565b809550506080890151935060a0890151925060c089015161193f8161157a565b60e08a015190925067ffffffffffffffff81111561195c57600080fd5b6119688b828c01611844565b9150509295985092959890939650565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b818110156119c1578451835293830193918301916001016119a5565b5090979650505050505050565b6000602082840312156119e057600080fd5b8151610b7f8161154b565b63ffffffff818116838216019080821115611a0857611a0861178a565b5092915050565b600060208284031215611a2157600080fd5b81518015158114610b7f57600080fd5b600080600080600080600060e0888a031215611a4c57600080fd5b8751611a578161157a565b6020890151909750611a688161157a565b6040890151909650611a798161157a565b6060890151909550611a8a8161154b565b809450506080880151925060a0880151915060c0880151905092959891949750929550565b60008060408385031215611ac257600080fd5b8251611acd8161157a565b602084015190925067ffffffffffffffff811115611aea57600080fd5b611af685828601611844565b9150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ab328fb1a4e093d4d12859e26cec37e663125c61070ccda93b874f45821b408b64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80638a2f2c8a11610125578063a7713a70116100ad578063d3c22b381161007c578063d3c22b3814610472578063deb61c15146104b6578063e8575a7f146104ff578063f2fde38b14610512578063f96dae0a1461052557600080fd5b8063a7713a701461043a578063a77a81d014610443578063bf7e2c7f14610456578063ca1dc30b1461045f57600080fd5b806397e39fef116100f457806397e39fef146103e55780639bff4df4146103f85780639dd783c214610401578063a09c4f6814610414578063a4f9edbf1461042757600080fd5b80638a2f2c8a1461039b5780638da5cb5b146103ae578063918f84bf146103bf5780639767fb72146103d257600080fd5b806350631bfe116101a85780636fef541a116101775780636fef541a1461036e578063709e23f814610378578063715018a61461038057806374ec29a0146103885780638081be911461036e57600080fd5b806350631bfe146102dc57806353a8b320146102ff57806355a9dbd91461031257806366b629551461034357600080fd5b80631e2972e8116101e45780631e2972e81461029057806333f48a5e146102a357806337938ab3146102b65780633a622c52146102c957600080fd5b806302a251a31461021657806306f3f9e61461024757806308453ad21461025c5780631236af7c1461027d575b600080fd5b606a5461022d90600160a01b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61025a610255366004611532565b610538565b005b61026f61026a36600461155d565b61054c565b60405190815260200161023e565b61026f61028b36600461155d565b6105d5565b61026f61029e366004611532565b6105fb565b61025a6102b136600461155d565b61061c565b61025a6102c436600461158f565b61062d565b61025a6102d7366004611532565b61067f565b6102ef6102ea366004611532565b61079c565b604051901515815260200161023e565b6102ef61030d36600461155d565b6107f2565b61022d61032036600461155d565b63ffffffff9081166000908152606c602052604090205464010000000090041690565b606754610356906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b61026f620f424081565b60665461026f565b61025a610880565b6102ef61039636600461158f565b610894565b61025a6103a9366004611532565b61089f565b6033546001600160a01b0316610356565b6102ef6103cd3660046115ac565b6108b0565b61025a6103e03660046115ce565b6108e2565b606554610356906001600160a01b031681565b61026f606b5481565b6102ef61040f36600461160d565b6108fb565b61025a610422366004611532565b61092d565b61025a610435366004611680565b61093e565b61026f60685481565b61025a610451366004611680565b610a0a565b61026f60695481565b61026f61046d366004611715565b610af1565b6102ef610480366004611743565b63ffffffff82166000908152606c602090815260408083206001600160a01b038516845260040190915290205460ff1692915050565b6104c96104c436600461155d565b610b86565b6040805196875260208701959095529385019290925263ffffffff908116606085015216608083015260a082015260c00161023e565b61025a61050d366004611532565b610bd5565b61025a61052036600461158f565b610be6565b606a54610356906001600160a01b031681565b610540610c61565b61054981610cbb565b50565b606a5463ffffffff8281166000908152606c6020526040808220549051632394e7a360e21b815292166004830152916001600160a01b031690638e539e8c90602401602060405180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190611771565b92915050565b6000620f42406105e48361054c565b6068546105f191906117a0565b6105cf91906117b7565b6066818154811061060b57600080fd5b600091825260209091200154905081565b610624610c61565b61054981610d1b565b610635610c61565b606780546001600160a01b0319166001600160a01b0383169081179091556040517fac8d831a6ed53a98387842e08d9e0893c1d478f4a3710b254e22bd58c06b269090600090a250565b610687610c61565b6000805b6066548110156107455782606682815481106106a9576106a96117d9565b90600052602060002001540361073357606680546106c9906001906117ef565b815481106106d9576106d96117d9565b9060005260206000200154606682815481106106f7576106f76117d9565b600091825260209091200155606680548061071457610714611802565b6001900381819060005260206000200160009055905560019150610745565b8061073d81611818565b91505061068b565b508061076457604051634b8d041f60e01b815260040160405180910390fd5b6040518281527f50544666722f5a4554f2716b5efb2ce814101451643c8856221fef06b5e9803b906020015b60405180910390a15050565b6000805b6066548110156107e95782606682815481106107be576107be6117d9565b9060005260206000200154036107d75750600192915050565b806107e181611818565b9150506107a0565b50600092915050565b63ffffffff8082166000908152606c60205260408120549091640100000000909104164311801561084f575061084f61082a8361054c565b63ffffffff84166000908152606c6020526040902060028101546003909101546108fb565b80156105cf575063ffffffff82166000908152606c6020526040902060028101546001909101546105cf91906108b0565b610888610c61565b6108926000610d6f565b565b60006105cf82610dc1565b6108a7610c61565b61054981610e93565b6000620f424060695483856108c59190611831565b6108cf91906117a0565b6108d991906117b7565b90921192915050565b6108f78233836108f23387610af1565b610ec8565b5050565b6000620f42406068548561090f91906117a0565b61091991906117b7565b6109238385611831565b1015949350505050565b610935610c61565b610549816110e7565b6000806000806000806000808880602001905181019061095e91906118c4565b604080516001600160a01b03808b166020830152808a1692820192909252908716606082015263ffffffff86166080820152600060a082015260c0810185905260e08101849052979f50959d50939b5091995097509550935091506109d590610100016040516020818303038152906040526111a9565b6109ff82826040516020016109eb929190611978565b6040516020818303038152906040526113a2565b505050505050505050565b6067546001600160a01b03163314610a35576040516358c30ce160e01b815260040160405180910390fd5b600081806020019051810190610a4b91906119ce565b606a54909150600090610a6b90600160a01b900463ffffffff16436119eb565b63ffffffff8381166000818152606c6020908152604091829020805467ffffffffffffffff191664010000000087871690810263ffffffff1916919091174390961695909517905581519283528201929092529192507f80d0ad93bba25e53bf67fa9f2d13df59f04795ec2f91b9b3c1f607666daf9d64910160405180910390a1505050565b606a5463ffffffff8281166000908152606c6020526040808220549051630748d63560e31b81526001600160a01b03878116600483015291909316602484015290921690633a46b1a890604401602060405180830381865afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190611771565b9392505050565b63ffffffff8082166000908152606c6020526040812060018101546002820154600383015492549194909382821692640100000000900490911690610bca8761054c565b905091939550919395565b610bdd610c61565b61054981611468565b610bee610c61565b6001600160a01b038116610c585760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61054981610d6f565b6033546001600160a01b031633146108925760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c4f565b620f4240811115610cdf57604051630d2a3fcb60e41b815260040160405180910390fd5b60688190556040518181527f0cc18e3862a55e514917eb8f248561dd65e0fbbba65f5468f203e92193635dd3906020015b60405180910390a150565b606a805463ffffffff60a01b1916600160a01b63ffffffff8416908102919091179091556040519081527f70770ce479f70673c3ed8fff63cfb758a6ffdddc30cab7c63d54c8d825e3948890602001610d10565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805b6066548110156107e957606554606680546001600160a01b0390921691634352409a91869185908110610dfa57610dfa6117d9565b6000918252602090912001546040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa158015610e4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e739190611a0f565b15610e815750600192915050565b80610e8b81611818565b915050610dc5565b606b8190556040518181527f93deb5027728f04c9fd8d7bcea2efb36cc7a6a7876236649f2952de0aa89a01190602001610d10565b63ffffffff8085166000908152606c602052604081205464010000000090049091169003610f0957604051631dc0650160e31b815260040160405180910390fd5b63ffffffff8085166000908152606c6020526040902054640100000000900416431115610f4957604051637a19ed0560e01b815260040160405180910390fd5b63ffffffff84166000908152606c602090815260408083206001600160a01b038716845260040190915290205460ff1615610f9757604051637c9a1cf960e01b815260040160405180910390fd5b63ffffffff84166000908152606c602090815260408083206001600160a01b03871684526004019091529020805460ff1916600117905560ff82166110095763ffffffff84166000908152606c602052604081206001018054839290610ffe908490611831565b9091555061108a9050565b60001960ff83160161103d5763ffffffff84166000908152606c602052604081206002018054839290610ffe908490611831565b60011960ff8316016110715763ffffffff84166000908152606c602052604081206003018054839290610ffe908490611831565b604051636aee863360e11b815260040160405180910390fd5b604080516001600160a01b038516815263ffffffff8616602082015260ff8416818301526060810183905290517fe82b577bd384111662dd034b9114cbe59b26ea201f009d385006518ed28bed819181900360800190a150505050565b60005b606654811015611143578160668281548110611108576111086117d9565b9060005260206000200154036111315760405163634a456360e01b815260040160405180910390fd5b8061113b81611818565b9150506110ea565b50606680546001810182556000919091527f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e94354018190556040518181527f30590a8684cec4e5a2b48765f391c996b9a004652478a8f41dc46658ccb699ed90602001610d10565b600054610100900460ff16158080156111c95750600054600160ff909116105b806111e35750303b1580156111e3575060005460ff166001145b6112465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610c4f565b6000805460ff191660011790558015611269576000805461ff0019166101001790555b6000806000806000806000888060200190518101906112889190611a31565b959c50939a5091985096509450925090506001600160a01b0386166112c057604051630f58058360e11b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0388161790556112e36114d8565b6112ec87610be6565b6112f585610635565b6112fe82610cbb565b61130781611468565b61131084610d1b565b61131983610e93565b866001600160a01b0316856001600160a01b03167fca32f512f02914f6bc16a49e786443029061b9adc5a987fd2f6efa56c0116a1660405160405180910390a35050505050505080156108f7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610790565b600080828060200190518101906113b99190611aaf565b90925090506001600160a01b0382166113e5576040516350e80d4360e11b815260040160405180910390fd5b606580546001600160a01b0319166001600160a01b038416179055805160000361142257604051632a2b50e760e01b815260040160405180910390fd5b60005b815181101561146257611450828281518110611443576114436117d9565b60200260200101516110e7565b8061145a81611818565b915050611425565b50505050565b620f424081118061148557506114826002620f42406117b7565b81105b156114a3576040516302396b6b60e61b815260040160405180910390fd5b60698190556040518181527f406c076eac4d3dde1c5d55793e80239daa8c60ee971390ce3d9f90ca4206295390602001610d10565b600054610100900460ff166114ff5760405162461bcd60e51b8152600401610c4f90611b00565b610892600054610100900460ff166115295760405162461bcd60e51b8152600401610c4f90611b00565b61089233610d6f565b60006020828403121561154457600080fd5b5035919050565b63ffffffff8116811461054957600080fd5b60006020828403121561156f57600080fd5b8135610b7f8161154b565b6001600160a01b038116811461054957600080fd5b6000602082840312156115a157600080fd5b8135610b7f8161157a565b600080604083850312156115bf57600080fd5b50508035926020909101359150565b600080604083850312156115e157600080fd5b82356115ec8161154b565b9150602083013560ff8116811461160257600080fd5b809150509250929050565b60008060006060848603121561162257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561167857611678611639565b604052919050565b6000602080838503121561169357600080fd5b823567ffffffffffffffff808211156116ab57600080fd5b818501915085601f8301126116bf57600080fd5b8135818111156116d1576116d1611639565b6116e3601f8201601f1916850161164f565b915080825286848285010111156116f957600080fd5b8084840185840137600090820190930192909252509392505050565b6000806040838503121561172857600080fd5b82356117338161157a565b915060208301356116028161154b565b6000806040838503121561175657600080fd5b82356117618161154b565b915060208301356116028161157a565b60006020828403121561178357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cf576105cf61178a565b6000826117d457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b818103818111156105cf576105cf61178a565b634e487b7160e01b600052603160045260246000fd5b60006001820161182a5761182a61178a565b5060010190565b808201808211156105cf576105cf61178a565b600082601f83011261185557600080fd5b8151602067ffffffffffffffff82111561187157611871611639565b8160051b61188082820161164f565b928352848101820192828101908785111561189a57600080fd5b83870192505b848310156118b9578251825291830191908301906118a0565b979650505050505050565b600080600080600080600080610100898b0312156118e157600080fd5b88516118ec8161157a565b60208a01519098506118fd8161157a565b60408a015190975061190e8161157a565b60608a015190965061191f8161154b565b809550506080890151935060a0890151925060c089015161193f8161157a565b60e08a015190925067ffffffffffffffff81111561195c57600080fd5b6119688b828c01611844565b9150509295985092959890939650565b6001600160a01b038316815260406020808301829052835191830182905260009184820191906060850190845b818110156119c1578451835293830193918301916001016119a5565b5090979650505050505050565b6000602082840312156119e057600080fd5b8151610b7f8161154b565b63ffffffff818116838216019080821115611a0857611a0861178a565b5092915050565b600060208284031215611a2157600080fd5b81518015158114610b7f57600080fd5b600080600080600080600060e0888a031215611a4c57600080fd5b8751611a578161157a565b6020890151909750611a688161157a565b6040890151909650611a798161157a565b6060890151909550611a8a8161154b565b809450506080880151925060a0880151915060c0880151905092959891949750929550565b60008060408385031215611ac257600080fd5b8251611acd8161157a565b602084015190925067ffffffffffffffff811115611aea57600080fd5b611af685828601611844565b9150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ab328fb1a4e093d4d12859e26cec37e663125c61070ccda93b874f45821b408b64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getProposalVotes(uint32)": {
        "params": {
          "_proposalId": "id of the Proposal"
        },
        "returns": {
          "abstainVotes": "current count of \"ABSTAIN\" votes",
          "endBlock": "block number voting ends",
          "noVotes": "current count of \"NO\" votes",
          "startBlock": "block number voting starts",
          "yesVotes": "current count of \"YES\" votes"
        }
      },
      "getProposalVotingSupply(uint32)": {
        "params": {
          "_proposalId": "id of the Proposal"
        },
        "returns": {
          "_0": "uint256 voting supply snapshot for the given _proposalId"
        }
      },
      "getVotingWeight(address,uint32)": {
        "params": {
          "_proposalId": "id of the Proposal",
          "_voter": "address of the voter"
        },
        "returns": {
          "_0": "uint256 the address' voting weight"
        }
      },
      "getWhitelistedHatsCount()": {
        "returns": {
          "_0": "The number of whitelisted hats"
        }
      },
      "hasVoted(uint32,address)": {
        "params": {
          "_address": "address to check",
          "_proposalId": "id of the Proposal to check"
        },
        "returns": {
          "_0": "bool true if the address has voted on the Proposal, otherwise false"
        }
      },
      "initializeProposal(bytes)": {
        "params": {
          "_data": "arbitrary data to pass to this BaseStrategy"
        }
      },
      "isHatWhitelisted(uint256)": {
        "params": {
          "_hatId": "The ID of the Hat to check"
        },
        "returns": {
          "_0": "True if the hat is whitelisted, false otherwise"
        }
      },
      "isPassed(uint32)": {
        "params": {
          "_proposalId": "proposalId to check"
        },
        "returns": {
          "_0": "bool true if the proposal has passed, otherwise false"
        }
      },
      "isProposer(address)": {
        "details": "Checks if an address is authorized to create proposals.",
        "params": {
          "_address": "The address to check for proposal creation authorization."
        },
        "returns": {
          "_0": "bool Returns true if the address is wearing any of the whitelisted Hats, false otherwise."
        }
      },
      "meetsBasis(uint256,uint256)": {
        "params": {
          "_noVotes": "number of votes against",
          "_yesVotes": "number of votes in favor"
        },
        "returns": {
          "_0": "bool whether the yes votes meets the set basis"
        }
      },
      "meetsQuorum(uint256,uint256,uint256)": {
        "params": {
          "_abstainVotes": "number of votes abstaining",
          "_totalSupply": "the total supply of tokens",
          "_yesVotes": "number of votes in favor"
        },
        "returns": {
          "_0": "bool whether the total number of yes votes + abstain meets the quorum"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quorumVotes(uint32)": {
        "params": {
          "_proposalId": "The ID of the proposal to get quorum votes for"
        },
        "returns": {
          "_0": "uint256 The quantity of votes required to meet quorum"
        }
      },
      "removeHatFromWhitelist(uint256)": {
        "params": {
          "_hatId": "The ID of the Hat to remove from the whitelist"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAzorius(address)": {
        "params": {
          "_azoriusModule": "address of the Azorius Safe module"
        }
      },
      "setUp(bytes)": {
        "params": {
          "initializeParams": "encoded initialization parameters: `address _owner`, `address _governanceToken`, `address _azoriusModule`, `uint32 _votingPeriod`, `uint256 _quorumNumerator`, `uint256 _basisNumerator`, `address _hatsContract`, `uint256[] _initialWhitelistedHats`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBasisNumerator(uint256)": {
        "params": {
          "_basisNumerator": "numerator to use"
        }
      },
      "updateQuorumNumerator(uint256)": {
        "params": {
          "_quorumNumerator": "numerator to use when calculating quorum (over 1,000,000)"
        }
      },
      "updateRequiredProposerWeight(uint256)": {
        "params": {
          "_requiredProposerWeight": "required token voting weight"
        }
      },
      "updateVotingPeriod(uint32)": {
        "params": {
          "_votingPeriod": "voting time period (in blocks)"
        }
      },
      "vote(uint32,uint8)": {
        "params": {
          "_proposalId": "id of the Proposal to vote on",
          "_voteType": "Proposal support as defined in VoteType (NO, YES, ABSTAIN)"
        }
      },
      "votingEndBlock(uint32)": {
        "params": {
          "_proposalId": "proposalId to check"
        },
        "returns": {
          "_0": "uint32 block number when voting ends on the Proposal"
        }
      },
      "whitelistHat(uint256)": {
        "params": {
          "_hatId": "The ID of the Hat to whitelist"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidQuorumNumerator()": [
        {
          "notice": "Ensures the numerator cannot be larger than the denominator. "
        }
      ]
    },
    "kind": "user",
    "methods": {
      "BASIS_DENOMINATOR()": {
        "notice": "The denominator to use when calculating basis (1,000,000). "
      },
      "QUORUM_DENOMINATOR()": {
        "notice": "The denominator to use when calculating quorum (1,000,000). "
      },
      "basisNumerator()": {
        "notice": "The numerator to use when calculating basis (adjustable). "
      },
      "getProposalVotes(uint32)": {
        "notice": "Returns the current state of the specified Proposal."
      },
      "getProposalVotingSupply(uint32)": {
        "notice": "Returns a snapshot of total voting supply for a given Proposal.  Because token supplies can change, it is necessary to calculate quorum from the supply available at the time of the Proposal's creation, not when it is being voted on passes / fails."
      },
      "getVotingWeight(address,uint32)": {
        "notice": "Calculates the voting weight an address has for a specific Proposal."
      },
      "getWhitelistedHatsCount()": {
        "notice": "Returns the number of whitelisted hats."
      },
      "hasVoted(uint32,address)": {
        "notice": "Returns whether an address has voted on the specified Proposal."
      },
      "initializeProposal(bytes)": {
        "notice": "Called by the [Azorius](../Azorius.md) module. This notifies this  [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created."
      },
      "isHatWhitelisted(uint256)": {
        "notice": "Checks if a hat is whitelisted."
      },
      "isPassed(uint32)": {
        "notice": "Returns whether a Proposal has been passed."
      },
      "isProposer(address)": {
        "notice": "This function overrides the isProposer function from the parent contract. It iterates through all whitelisted Hat IDs and checks if the given address is wearing any of them using the Hats Protocol."
      },
      "meetsBasis(uint256,uint256)": {
        "notice": "Calculates whether a vote meets its basis."
      },
      "meetsQuorum(uint256,uint256,uint256)": {
        "notice": "Calculates whether a vote meets quorum. This is calculated based on yes votes + abstain votes."
      },
      "quorumNumerator()": {
        "notice": "The numerator to use when calculating quorum (adjustable). "
      },
      "quorumVotes(uint32)": {
        "notice": "Calculates the total number of votes required for a proposal to meet quorum. "
      },
      "removeHatFromWhitelist(uint256)": {
        "notice": "Removes a Hat from the whitelist for proposal creation."
      },
      "requiredProposerWeight()": {
        "notice": "Voting weight required to be able to submit Proposals. "
      },
      "setAzorius(address)": {
        "notice": "Sets the address of the [Azorius](../Azorius.md) contract this  [BaseStrategy](../BaseStrategy.md) is being used on."
      },
      "setUp(bytes)": {
        "notice": "Sets up the contract with its initial parameters."
      },
      "updateBasisNumerator(uint256)": {
        "notice": "Updates the `basisNumerator` for future Proposals."
      },
      "updateQuorumNumerator(uint256)": {
        "notice": "Updates the quorum required for future Proposals."
      },
      "updateRequiredProposerWeight(uint256)": {
        "notice": "Updates the voting weight required to submit new Proposals."
      },
      "updateVotingPeriod(uint32)": {
        "notice": "Updates the voting time period for new Proposals."
      },
      "vote(uint32,uint8)": {
        "notice": "Casts votes for a Proposal, equal to the caller's token delegation."
      },
      "votingEndBlock(uint32)": {
        "notice": "Returns the block number voting ends on a given Proposal."
      },
      "votingPeriod()": {
        "notice": "Number of blocks a new Proposal can be voted on. "
      },
      "whitelistHat(uint256)": {
        "notice": "Adds a Hat to the whitelist for proposal creation."
      },
      "whitelistedHatIds(uint256)": {
        "notice": "Array to store whitelisted Hat IDs. "
      }
    },
    "notice": "An [Azorius](./Azorius.md) [BaseStrategy](./BaseStrategy.md) implementation that enables linear (i.e. 1 to 1) ERC21 based token voting, with proposal creation restricted to users wearing whitelisted Hats.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3585,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3588,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6487,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3379,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3499,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16744,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "hatsContract",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IHats)22245"
      },
      {
        "astId": 16748,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "whitelistedHatIds",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16551,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "azoriusModule",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IAzorius)21329"
      },
      {
        "astId": 16440,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "quorumNumerator",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 16651,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "basisNumerator",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 17692,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "governanceToken",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IVotes)9759"
      },
      {
        "astId": 17695,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "votingPeriod",
        "offset": 20,
        "slot": "106",
        "type": "t_uint32"
      },
      {
        "astId": 17698,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "requiredProposerWeight",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 17704,
        "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
        "label": "proposalVotes",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_uint256,t_struct(ProposalVotes)17689_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAzorius)21329": {
        "encoding": "inplace",
        "label": "contract IAzorius",
        "numberOfBytes": "20"
      },
      "t_contract(IHats)22245": {
        "encoding": "inplace",
        "label": "contract IHats",
        "numberOfBytes": "20"
      },
      "t_contract(IVotes)9759": {
        "encoding": "inplace",
        "label": "contract IVotes",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ProposalVotes)17689_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LinearERC20VotingExtensible.ProposalVotes)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVotes)17689_storage"
      },
      "t_struct(ProposalVotes)17689_storage": {
        "encoding": "inplace",
        "label": "struct LinearERC20VotingExtensible.ProposalVotes",
        "members": [
          {
            "astId": 17676,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "votingStartBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17678,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "votingEndBlock",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 17680,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "noVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 17682,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "yesVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 17684,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 17688,
            "contract": "contracts/azorius/LinearERC20VotingWithHatsProposalCreation.sol:LinearERC20VotingWithHatsProposalCreation",
            "label": "hasVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}