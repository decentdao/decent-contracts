{
  "address": "0xdA341A3B87eC85Fd8a4EA38eFD573752436FcDBf",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "freezePeriod",
          "type": "uint32"
        }
      ],
      "name": "FreezePeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "FreezeProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "freezeProposalPeriod",
          "type": "uint32"
        }
      ],
      "name": "FreezeProposalPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votesCast",
          "type": "uint256"
        }
      ],
      "name": "FreezeVoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freezeVotesThreshold",
          "type": "uint256"
        }
      ],
      "name": "FreezeVotesThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentGnosisSafe",
          "type": "address"
        }
      ],
      "name": "MultisigFreezeVotingSetup",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "castFreezeVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezePeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeProposalCreatedBlock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeProposalPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeProposalVoteCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freezeVotesThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isFrozen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentGnosisSafe",
      "outputs": [
        {
          "internalType": "contract ISafe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initializeParams",
          "type": "bytes"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unfreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_freezePeriod",
          "type": "uint32"
        }
      ],
      "name": "updateFreezePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_freezeProposalPeriod",
          "type": "uint32"
        }
      ],
      "name": "updateFreezeProposalPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_freezeVotesThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateFreezeVotesThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userHasFreezeVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87e69eddac14fabe19d7510d5f7f895302b2d59ff4a201444fa58167e7a6aac5",
  "receipt": {
    "to": null,
    "from": "0x629750317d320B8bB4d48D345A6d699Cc855c4a6",
    "contractAddress": "0xdA341A3B87eC85Fd8a4EA38eFD573752436FcDBf",
    "transactionIndex": 6,
    "gasUsed": "733650",
    "logsBloom": "0x
    "blockHash": "0xa01b0af03698c43d04be1fd82cebf3ff174d6ecea8b8a4f51064a8b4221e74a5",
    "transactionHash": "0x87e69eddac14fabe19d7510d5f7f895302b2d59ff4a201444fa58167e7a6aac5",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 7986143,
        "transactionHash": "0x87e69eddac14fabe19d7510d5f7f895302b2d59ff4a201444fa58167e7a6aac5",
        "address": "0xdA341A3B87eC85Fd8a4EA38eFD573752436FcDBf",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0xa01b0af03698c43d04be1fd82cebf3ff174d6ecea8b8a4f51064a8b4221e74a5"
      }
    ],
    "blockNumber": 7986143,
    "cumulativeGasUsed": "1701485",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f38f4478c70bad79f1e003d8a946fa0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"freezePeriod\",\"type\":\"uint32\"}],\"name\":\"FreezePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"FreezeProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"freezeProposalPeriod\",\"type\":\"uint32\"}],\"name\":\"FreezeProposalPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votesCast\",\"type\":\"uint256\"}],\"name\":\"FreezeVoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeVotesThreshold\",\"type\":\"uint256\"}],\"name\":\"FreezeVotesThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentGnosisSafe\",\"type\":\"address\"}],\"name\":\"MultisigFreezeVotingSetup\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"castFreezeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezePeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeProposalCreatedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeProposalPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeProposalVoteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freezeVotesThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentGnosisSafe\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializeParams\",\"type\":\"bytes\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_freezePeriod\",\"type\":\"uint32\"}],\"name\":\"updateFreezePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_freezeProposalPeriod\",\"type\":\"uint32\"}],\"name\":\"updateFreezeProposalPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_freezeVotesThreshold\",\"type\":\"uint256\"}],\"name\":\"updateFreezeVotesThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userHasFreezeVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"isFrozen()\":{\"returns\":{\"_0\":\"bool whether the DAO is currently frozen\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUp(bytes)\":{\"params\":{\"initializeParams\":\"encoded initialization parameters: `address _owner`, `uint256 _freezeVotesThreshold`, `uint256 _freezeProposalPeriod`, `uint256 _freezePeriod`, `address _parentGnosisSafe`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateFreezePeriod(uint32)\":{\"params\":{\"_freezePeriod\":\"number of blocks a freeze lasts, from time of freeze proposal creation\"}},\"updateFreezeProposalPeriod(uint32)\":{\"params\":{\"_freezeProposalPeriod\":\"number of blocks a freeze vote has to succeed to enact a freeze\"}},\"updateFreezeVotesThreshold(uint256)\":{\"params\":{\"_freezeVotesThreshold\":\"number of freeze votes required to activate a freeze\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"castFreezeVote()\":{\"notice\":\"Allows an address to cast a \\\"freeze vote\\\", which is a vote to freeze the DAO from executing transactions, even if they've already passed via a Proposal. If a vote to freeze has not already been initiated, a call to this function will do so. This function should be publicly callable by any DAO token holder or signer.\"},\"freezePeriod()\":{\"notice\":\"Number of blocks a freeze lasts, from time of freeze proposal creation. \"},\"freezeProposalCreatedBlock()\":{\"notice\":\"Block number the freeze proposal was created at. \"},\"freezeProposalPeriod()\":{\"notice\":\"Number of blocks a freeze proposal has to succeed. \"},\"freezeProposalVoteCount()\":{\"notice\":\"Number of accrued freeze votes. \"},\"freezeVotesThreshold()\":{\"notice\":\"Number of freeze votes required to activate a freeze. \"},\"isFrozen()\":{\"notice\":\"Returns true if the DAO is currently frozen, false otherwise. \"},\"setUp(bytes)\":{\"notice\":\"Initialize function, will be triggered when a new instance is deployed.\"},\"unfreeze()\":{\"notice\":\"Unfreezes the DAO, only callable by the owner (parentDAO).\"},\"updateFreezePeriod(uint32)\":{\"notice\":\"Updates the freeze period, the time the DAO will be unable to execute transactions for, should a freeze vote pass.\"},\"updateFreezeProposalPeriod(uint32)\":{\"notice\":\"Updates the freeze proposal period, the time that parent token holders have to cast votes after a freeze vote has been initiated.\"},\"updateFreezeVotesThreshold(uint256)\":{\"notice\":\"Updates the freeze votes threshold, the number of votes required to enact a freeze.\"},\"userHasFreezeVoted(address,uint256)\":{\"notice\":\"Mapping of address to the block the freeze vote was started to  whether the address has voted yet on the freeze proposal.\"}},\"notice\":\"A BaseFreezeVoting implementation which handles freezes on multi-sig (Safe) based DAOs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MultisigFreezeVoting.sol\":\"MultisigFreezeVoting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/BaseFreezeVoting.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { FactoryFriendly } from \\\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\\\";\\nimport { IBaseFreezeVoting } from \\\"./interfaces/IBaseFreezeVoting.sol\\\";\\n\\n/**\\n * The base abstract contract which holds the state of a vote to freeze a childDAO.\\n *\\n * The freeze feature gives a way for parentDAOs to have a limited measure of control\\n * over their created subDAOs.\\n *\\n * Normally a subDAO operates independently, and can vote on or sign transactions, \\n * however should the parent disagree with a decision made by the subDAO, any parent\\n * token holder can initiate a vote to \\\"freeze\\\" it, making executing transactions impossible\\n * for the time denoted by `freezePeriod`.\\n *\\n * This requires a number of votes equal to `freezeVotesThreshold`, within the `freezeProposalPeriod`\\n * to be successful.\\n *\\n * Following a successful freeze vote, the childDAO will be unable to execute transactions, due to\\n * a Safe Transaction Guard, until the `freezePeriod` has elapsed.\\n */\\nabstract contract BaseFreezeVoting is FactoryFriendly, IBaseFreezeVoting {\\n\\n    /** Block number the freeze proposal was created at. */\\n    uint32 public freezeProposalCreatedBlock;\\n\\n    /** Number of blocks a freeze proposal has to succeed. */\\n    uint32 public freezeProposalPeriod;\\n\\n    /** Number of blocks a freeze lasts, from time of freeze proposal creation. */\\n    uint32 public freezePeriod;\\n\\n    /** Number of freeze votes required to activate a freeze. */\\n    uint256 public freezeVotesThreshold;\\n\\n    /** Number of accrued freeze votes. */\\n    uint256 public freezeProposalVoteCount;\\n\\n    /**\\n    * Mapping of address to the block the freeze vote was started to \\n    * whether the address has voted yet on the freeze proposal.\\n    */\\n    mapping(address => mapping(uint256 => bool)) public userHasFreezeVoted;\\n\\n    event FreezeVoteCast(address indexed voter, uint256 votesCast);\\n    event FreezeProposalCreated(address indexed creator);\\n    event FreezeVotesThresholdUpdated(uint256 freezeVotesThreshold);\\n    event FreezePeriodUpdated(uint32 freezePeriod);\\n    event FreezeProposalPeriodUpdated(uint32 freezeProposalPeriod);\\n\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    /**\\n     * Casts a positive vote to freeze the subDAO. This function is intended to be called\\n     * by the individual token holders themselves directly, and will allot their token\\n     * holdings a \\\"yes\\\" votes towards freezing.\\n     *\\n     * Additionally, if a vote to freeze is not already running, calling this will initiate\\n     * a new vote to freeze it.\\n     */\\n    function castFreezeVote() external virtual;\\n\\n    /**\\n     * Returns true if the DAO is currently frozen, false otherwise.\\n     * \\n     * @return bool whether the DAO is currently frozen\\n     */\\n    function isFrozen() external view returns (bool) {\\n        return freezeProposalVoteCount >= freezeVotesThreshold \\n            && block.number < freezeProposalCreatedBlock + freezePeriod;\\n    }\\n\\n    /**\\n     * Unfreezes the DAO, only callable by the owner (parentDAO).\\n     */\\n    function unfreeze() external onlyOwner {\\n        freezeProposalCreatedBlock = 0;\\n        freezeProposalVoteCount = 0;\\n    }\\n\\n    /**\\n     * Updates the freeze votes threshold, the number of votes required to enact a freeze.\\n     *\\n     * @param _freezeVotesThreshold number of freeze votes required to activate a freeze\\n     */\\n    function updateFreezeVotesThreshold(uint256 _freezeVotesThreshold) external onlyOwner {\\n        _updateFreezeVotesThreshold(_freezeVotesThreshold);\\n    }\\n\\n    /**\\n     * Updates the freeze proposal period, the time that parent token holders have to cast votes\\n     * after a freeze vote has been initiated.\\n     *\\n     * @param _freezeProposalPeriod number of blocks a freeze vote has to succeed to enact a freeze\\n     */\\n    function updateFreezeProposalPeriod(uint32 _freezeProposalPeriod) external onlyOwner {\\n        _updateFreezeProposalPeriod(_freezeProposalPeriod);\\n    }\\n\\n    /**\\n     * Updates the freeze period, the time the DAO will be unable to execute transactions for,\\n     * should a freeze vote pass.\\n     *\\n     * @param _freezePeriod number of blocks a freeze lasts, from time of freeze proposal creation\\n     */\\n    function updateFreezePeriod(uint32 _freezePeriod) external onlyOwner {\\n        _updateFreezePeriod(_freezePeriod);\\n    }\\n\\n    /** Internal implementation of `updateFreezeVotesThreshold`. */\\n    function _updateFreezeVotesThreshold(uint256 _freezeVotesThreshold) internal {\\n        freezeVotesThreshold = _freezeVotesThreshold;\\n        emit FreezeVotesThresholdUpdated(_freezeVotesThreshold);\\n    }\\n\\n    /** Internal implementation of `updateFreezeProposalPeriod`. */\\n    function _updateFreezeProposalPeriod(uint32 _freezeProposalPeriod) internal {\\n        freezeProposalPeriod = _freezeProposalPeriod;\\n        emit FreezeProposalPeriodUpdated(_freezeProposalPeriod);\\n    }\\n\\n    /** Internal implementation of `updateFreezePeriod`. */\\n    function _updateFreezePeriod(uint32 _freezePeriod) internal {\\n        freezePeriod = _freezePeriod;\\n        emit FreezePeriodUpdated(_freezePeriod);\\n    }\\n}\\n\",\"keccak256\":\"0x724d5ae60464ad67c4a3cef0b0b4500479ec6415b935a862164542304dee6a0c\",\"license\":\"MIT\"},\"contracts/MultisigFreezeVoting.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { BaseFreezeVoting, IBaseFreezeVoting } from \\\"./BaseFreezeVoting.sol\\\";\\nimport { ISafe } from \\\"./interfaces/ISafe.sol\\\";\\n\\n/**\\n * A BaseFreezeVoting implementation which handles freezes on multi-sig (Safe) based DAOs.\\n */\\ncontract MultisigFreezeVoting is BaseFreezeVoting {\\n    ISafe public parentGnosisSafe;\\n\\n    event MultisigFreezeVotingSetup(\\n        address indexed owner,\\n        address indexed parentGnosisSafe\\n    );\\n\\n    error NotOwner();\\n    error AlreadyVoted();\\n\\n    /**\\n     * Initialize function, will be triggered when a new instance is deployed.\\n     *\\n     * @param initializeParams encoded initialization parameters: `address _owner`,\\n     * `uint256 _freezeVotesThreshold`, `uint256 _freezeProposalPeriod`, `uint256 _freezePeriod`,\\n     * `address _parentGnosisSafe`\\n     */\\n    function setUp(bytes memory initializeParams) public override initializer {\\n        (\\n            address _owner,\\n            uint256 _freezeVotesThreshold,\\n            uint32 _freezeProposalPeriod,\\n            uint32 _freezePeriod,\\n            address _parentGnosisSafe\\n        ) = abi.decode(\\n                initializeParams,\\n                (address, uint256, uint32, uint32, address)\\n            );\\n\\n        __Ownable_init();\\n        _transferOwnership(_owner);\\n        _updateFreezeVotesThreshold(_freezeVotesThreshold);\\n        _updateFreezeProposalPeriod(_freezeProposalPeriod);\\n        _updateFreezePeriod(_freezePeriod);\\n        parentGnosisSafe = ISafe(_parentGnosisSafe);\\n\\n        emit MultisigFreezeVotingSetup(_owner, _parentGnosisSafe);\\n    }\\n\\n    /** @inheritdoc IBaseFreezeVoting*/\\n    function castFreezeVote() external override {\\n        if (!parentGnosisSafe.isOwner(msg.sender)) revert NotOwner();\\n\\n        if (block.number > freezeProposalCreatedBlock + freezeProposalPeriod) {\\n            // create a new freeze proposal and count the caller's vote\\n\\n            freezeProposalCreatedBlock = uint32(block.number);\\n\\n            freezeProposalVoteCount = 1;\\n\\n            emit FreezeProposalCreated(msg.sender);\\n        } else {\\n            // there is an existing freeze proposal, count the caller's vote\\n\\n            if (userHasFreezeVoted[msg.sender][freezeProposalCreatedBlock])\\n                revert AlreadyVoted();\\n\\n            freezeProposalVoteCount++;\\n        }\\n\\n        userHasFreezeVoted[msg.sender][freezeProposalCreatedBlock] = true;\\n\\n        emit FreezeVoteCast(msg.sender, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x3eb386413c5191595e76e810ea1b827ad0b2d13a44fcaba95ba2d5ecd5aadfa5\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseFreezeVoting.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { Enum } from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\n/**\\n * A specification for a contract which manages the ability to call for and cast a vote\\n * to freeze a subDAO.\\n *\\n * The participants of this vote are parent token holders or signers. The DAO should be\\n * able to operate as normal throughout the freeze voting process, however if the vote\\n * passes, further transaction executions on the subDAO should be blocked via a Safe guard\\n * module (see [MultisigFreezeGuard](../MultisigFreezeGuard.md) / [AzoriusFreezeGuard](../AzoriusFreezeGuard.md)).\\n */\\ninterface IBaseFreezeVoting {\\n\\n    /**\\n     * Allows an address to cast a \\\"freeze vote\\\", which is a vote to freeze the DAO\\n     * from executing transactions, even if they've already passed via a Proposal.\\n     *\\n     * If a vote to freeze has not already been initiated, a call to this function will do\\n     * so.\\n     *\\n     * This function should be publicly callable by any DAO token holder or signer.\\n     */\\n    function castFreezeVote() external;\\n\\n    /**\\n     * Unfreezes the DAO.\\n     */\\n    function unfreeze() external;\\n\\n    /**\\n     * Updates the freeze votes threshold for future freeze votes. This is the number of token\\n     * votes necessary to begin a freeze on the subDAO.\\n     *\\n     * @param _freezeVotesThreshold number of freeze votes required to activate a freeze\\n     */\\n    function updateFreezeVotesThreshold(uint256 _freezeVotesThreshold) external;\\n\\n    /**\\n     * Updates the freeze proposal period for future freeze votes. This is the length of time\\n     * (in blocks) that a freeze vote is conducted for.\\n     *\\n     * @param _freezeProposalPeriod number of blocks a freeze proposal has to succeed\\n     */\\n    function updateFreezeProposalPeriod(uint32 _freezeProposalPeriod) external;\\n\\n    /**\\n     * Updates the freeze period. This is the length of time (in blocks) the subDAO is actually\\n     * frozen for if a freeze vote passes.\\n     *\\n     * This period can be overridden by a call to `unfreeze()`, which would require a passed Proposal\\n     * from the parentDAO.\\n     *\\n     * @param _freezePeriod number of blocks a freeze lasts, from time of freeze proposal creation\\n     */\\n    function updateFreezePeriod(uint32 _freezePeriod) external;\\n\\n    /**\\n     * Returns true if the DAO is currently frozen, false otherwise.\\n     *\\n     * @return bool whether the DAO is currently frozen\\n     */\\n    function isFrozen() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x09d600bfe81b0ef790cca83dd1bb51dbbb47f73afb4053fc0fa4dc5bc70d6414\",\"license\":\"MIT\"},\"contracts/interfaces/ISafe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { Enum } from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\n/**\\n * The specification of methods available on a Safe contract wallet.\\n * \\n * This interface does not encompass every available function on a Safe,\\n * only those which are used within the Azorius contracts.\\n *\\n * For the complete set of functions available on a Safe, see:\\n * https://github.com/safe-global/safe-contracts/blob/main/contracts/Safe.sol\\n */\\ninterface ISafe {\\n\\n    /**\\n     * Returns the current transaction nonce of the Safe.\\n     * Each transaction should has a different nonce to prevent replay attacks.\\n     *\\n     * @return uint256 current transaction nonce\\n     */\\n    function nonce() external view returns (uint256);\\n\\n    /**\\n     * Set a guard contract that checks transactions before execution.\\n     * This can only be done via a Safe transaction.\\n     *\\n     * See https://docs.gnosis-safe.io/learn/safe-tools/guards.\\n     * See https://github.com/safe-global/safe-contracts/blob/main/contracts/base/GuardManager.sol.\\n     * \\n     * @param _guard address of the guard to be used or the 0 address to disable a guard\\n     */\\n    function setGuard(address _guard) external;\\n\\n    /**\\n     * Executes an arbitrary transaction on the Safe.\\n     *\\n     * @param _to destination address\\n     * @param _value ETH value\\n     * @param _data data payload\\n     * @param _operation Operation type, Call or DelegateCall\\n     * @param _safeTxGas gas that should be used for the safe transaction\\n     * @param _baseGas gas costs that are independent of the transaction execution\\n     * @param _gasPrice max gas price that should be used for this transaction\\n     * @param _gasToken token address (or 0 if ETH) that is used for the payment\\n     * @param _refundReceiver address of the receiver of gas payment (or 0 if tx.origin)\\n     * @param _signatures packed signature data\\n     * @return success bool whether the transaction was successful or not\\n     */\\n    function execTransaction(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data,\\n        Enum.Operation _operation,\\n        uint256 _safeTxGas,\\n        uint256 _baseGas,\\n        uint256 _gasPrice,\\n        address _gasToken,\\n        address payable _refundReceiver,\\n        bytes memory _signatures\\n    ) external payable returns (bool success);\\n\\n    /**\\n     * Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\\n     *\\n     * @param _dataHash Hash of the data (could be either a message hash or transaction hash)\\n     * @param _data That should be signed (this is passed to an external validator contract)\\n     * @param _signatures Signature data that should be verified. Can be packed ECDSA signature \\n     *      ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\\n     */\\n    function checkSignatures(bytes32 _dataHash, bytes memory _data, bytes memory _signatures) external view;\\n\\n    /**\\n     * Returns the pre-image of the transaction hash.\\n     *\\n     * @param _to destination address\\n     * @param _value ETH value\\n     * @param _data data payload\\n     * @param _operation Operation type, Call or DelegateCall\\n     * @param _safeTxGas gas that should be used for the safe transaction\\n     * @param _baseGas gas costs that are independent of the transaction execution\\n     * @param _gasPrice max gas price that should be used for this transaction\\n     * @param _gasToken token address (or 0 if ETH) that is used for the payment\\n     * @param _refundReceiver address of the receiver of gas payment (or 0 if tx.origin)\\n     * @param _nonce transaction nonce\\n     * @return bytes hash bytes\\n     */\\n    function encodeTransactionData(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data,\\n        Enum.Operation _operation,\\n        uint256 _safeTxGas,\\n        uint256 _baseGas,\\n        uint256 _gasPrice,\\n        address _gasToken,\\n        address _refundReceiver,\\n        uint256 _nonce\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * Returns if the given address is an owner of the Safe.\\n     *\\n     * See https://github.com/safe-global/safe-contracts/blob/main/contracts/base/OwnerManager.sol.\\n     *\\n     * @param _owner the address to check\\n     * @return bool whether _owner is an owner of the Safe\\n     */\\n    function isOwner(address _owner) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xebb754e0713ed37d6e94fcf3706d264803460585780ad2500a38f12bd2a73d3c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610bd3806100ed6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063a91e5cab11610071578063a91e5cab1461023a578063aba9dfe914610242578063f2fde38b14610255578063fb80bccc14610268578063ffd1a81a1461027157600080fd5b80638da5cb5b146101d05780638f920e18146101e1578063a0df297a1461020f578063a4f9edbf1461022757600080fd5b8063559a24e3116100de578063559a24e3146101995780636a28f000146101a9578063715018a6146101b15780638a79cadf146101b957600080fd5b80630a3cb6631461011057806333eeb14714610141578063395f8a9414610159578063526a2bdf14610184575b600080fd5b60655461012790600160401b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b610149610284565b6040519015158152602001610138565b60695461016c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b610197610192366004610910565b6102bf565b005b6065546101279063ffffffff1681565b6101976102d3565b6101976102ef565b6101c260675481565b604051908152602001610138565b6033546001600160a01b031661016c565b6101496101ef366004610949565b606860209081526000928352604080842090915290825290205460ff1681565b60655461012790640100000000900463ffffffff1681565b61019761023536600461098b565b610303565b6101976104b6565b610197610250366004610a3c565b610670565b610197610263366004610a55565b610681565b6101c260665481565b61019761027f366004610910565b6106f7565b6000606654606754101580156102ba57506065546102b19063ffffffff600160401b820481169116610a88565b63ffffffff1643105b905090565b6102c7610708565b6102d081610762565b50565b6102db610708565b6065805463ffffffff191690556000606755565b6102f7610708565b61030160006107c2565b565b600054610100900460ff16158080156103235750600054600160ff909116105b8061033d5750303b15801561033d575060005460ff166001145b6103a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103c8576000805461ff0019166101001790555b6000806000806000868060200190518101906103e49190610aac565b945094509450945094506103f6610814565b6103ff856107c2565b61040884610843565b61041183610878565b61041a82610762565b606980546001600160a01b0319166001600160a01b0383811691821790925560405190918716907f710846f47287c6a1d53927364d847b2ee1e9311c67f4898a2b73870f2135727690600090a3505050505080156104b2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6069546040516317aa5fb760e11b81523360048201526001600160a01b0390911690632f54bf6e90602401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610b17565b61053f576040516330cd747160e01b815260040160405180910390fd5b60655461055c9063ffffffff640100000000820481169116610a88565b63ffffffff164311156105b3576065805463ffffffff19164363ffffffff16179055600160675560405133907fe18d0e7e892cd73f8a648a42186da382bee61a1d78ac88401885943449f78fe490600090a261060d565b33600090815260686020908152604080832060655463ffffffff16845290915290205460ff16156105f757604051637c9a1cf960e01b815260040160405180910390fd5b6067805490600061060783610b39565b91905055505b33600081815260686020908152604080832060655463ffffffff168452825291829020805460ff1916600190811790915591519182527f3746cafa4f96166ea7502cf76d1ea8ce440f3c8215cbcac3ae32d3ee39afae42910160405180910390a2565b610678610708565b6102d081610843565b610689610708565b6001600160a01b0381166106ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161039c565b6102d0816107c2565b6106ff610708565b6102d081610878565b6033546001600160a01b031633146103015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039c565b606580546bffffffff00000000000000001916600160401b63ffffffff8416908102919091179091556040519081527f5636570ff998e84ff32771b2428b549514d4c972696ed5efdba2aed546f9cc6a906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661083b5760405162461bcd60e51b815260040161039c90610b52565b6103016108ce565b60668190556040518181527f34fd19d57e73972c099110353fb0a4035d76f918df2fd8f09ff0edb3873eef76906020016107b7565b6065805467ffffffff00000000191664010000000063ffffffff8416908102919091179091556040519081527f7460615b2a82592ae60779b21813830f03d8994396a782c0e021a474568325e0906020016107b7565b600054610100900460ff166108f55760405162461bcd60e51b815260040161039c90610b52565b610301336107c2565b63ffffffff811681146102d057600080fd5b60006020828403121561092257600080fd5b813561092d816108fe565b9392505050565b6001600160a01b03811681146102d057600080fd5b6000806040838503121561095c57600080fd5b823561096781610934565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561099d57600080fd5b813567ffffffffffffffff808211156109b557600080fd5b818401915084601f8301126109c957600080fd5b8135818111156109db576109db610975565b604051601f8201601f19908116603f01168101908382118183101715610a0357610a03610975565b81604052828152876020848701011115610a1c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215610a4e57600080fd5b5035919050565b600060208284031215610a6757600080fd5b813561092d81610934565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115610aa557610aa5610a72565b5092915050565b600080600080600060a08688031215610ac457600080fd5b8551610acf81610934565b602087015160408801519196509450610ae7816108fe565b6060870151909350610af8816108fe565b6080870151909250610b0981610934565b809150509295509295909350565b600060208284031215610b2957600080fd5b8151801515811461092d57600080fd5b600060018201610b4b57610b4b610a72565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e4066f18eac2b7960a97a08f3c75ff02d511e69f619665bb394e53b0581a221164736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80638da5cb5b116100a2578063a91e5cab11610071578063a91e5cab1461023a578063aba9dfe914610242578063f2fde38b14610255578063fb80bccc14610268578063ffd1a81a1461027157600080fd5b80638da5cb5b146101d05780638f920e18146101e1578063a0df297a1461020f578063a4f9edbf1461022757600080fd5b8063559a24e3116100de578063559a24e3146101995780636a28f000146101a9578063715018a6146101b15780638a79cadf146101b957600080fd5b80630a3cb6631461011057806333eeb14714610141578063395f8a9414610159578063526a2bdf14610184575b600080fd5b60655461012790600160401b900463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b610149610284565b6040519015158152602001610138565b60695461016c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b610197610192366004610910565b6102bf565b005b6065546101279063ffffffff1681565b6101976102d3565b6101976102ef565b6101c260675481565b604051908152602001610138565b6033546001600160a01b031661016c565b6101496101ef366004610949565b606860209081526000928352604080842090915290825290205460ff1681565b60655461012790640100000000900463ffffffff1681565b61019761023536600461098b565b610303565b6101976104b6565b610197610250366004610a3c565b610670565b610197610263366004610a55565b610681565b6101c260665481565b61019761027f366004610910565b6106f7565b6000606654606754101580156102ba57506065546102b19063ffffffff600160401b820481169116610a88565b63ffffffff1643105b905090565b6102c7610708565b6102d081610762565b50565b6102db610708565b6065805463ffffffff191690556000606755565b6102f7610708565b61030160006107c2565b565b600054610100900460ff16158080156103235750600054600160ff909116105b8061033d5750303b15801561033d575060005460ff166001145b6103a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156103c8576000805461ff0019166101001790555b6000806000806000868060200190518101906103e49190610aac565b945094509450945094506103f6610814565b6103ff856107c2565b61040884610843565b61041183610878565b61041a82610762565b606980546001600160a01b0319166001600160a01b0383811691821790925560405190918716907f710846f47287c6a1d53927364d847b2ee1e9311c67f4898a2b73870f2135727690600090a3505050505080156104b2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6069546040516317aa5fb760e11b81523360048201526001600160a01b0390911690632f54bf6e90602401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610b17565b61053f576040516330cd747160e01b815260040160405180910390fd5b60655461055c9063ffffffff640100000000820481169116610a88565b63ffffffff164311156105b3576065805463ffffffff19164363ffffffff16179055600160675560405133907fe18d0e7e892cd73f8a648a42186da382bee61a1d78ac88401885943449f78fe490600090a261060d565b33600090815260686020908152604080832060655463ffffffff16845290915290205460ff16156105f757604051637c9a1cf960e01b815260040160405180910390fd5b6067805490600061060783610b39565b91905055505b33600081815260686020908152604080832060655463ffffffff168452825291829020805460ff1916600190811790915591519182527f3746cafa4f96166ea7502cf76d1ea8ce440f3c8215cbcac3ae32d3ee39afae42910160405180910390a2565b610678610708565b6102d081610843565b610689610708565b6001600160a01b0381166106ee5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161039c565b6102d0816107c2565b6106ff610708565b6102d081610878565b6033546001600160a01b031633146103015760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161039c565b606580546bffffffff00000000000000001916600160401b63ffffffff8416908102919091179091556040519081527f5636570ff998e84ff32771b2428b549514d4c972696ed5efdba2aed546f9cc6a906020015b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661083b5760405162461bcd60e51b815260040161039c90610b52565b6103016108ce565b60668190556040518181527f34fd19d57e73972c099110353fb0a4035d76f918df2fd8f09ff0edb3873eef76906020016107b7565b6065805467ffffffff00000000191664010000000063ffffffff8416908102919091179091556040519081527f7460615b2a82592ae60779b21813830f03d8994396a782c0e021a474568325e0906020016107b7565b600054610100900460ff166108f55760405162461bcd60e51b815260040161039c90610b52565b610301336107c2565b63ffffffff811681146102d057600080fd5b60006020828403121561092257600080fd5b813561092d816108fe565b9392505050565b6001600160a01b03811681146102d057600080fd5b6000806040838503121561095c57600080fd5b823561096781610934565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561099d57600080fd5b813567ffffffffffffffff808211156109b557600080fd5b818401915084601f8301126109c957600080fd5b8135818111156109db576109db610975565b604051601f8201601f19908116603f01168101908382118183101715610a0357610a03610975565b81604052828152876020848701011115610a1c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215610a4e57600080fd5b5035919050565b600060208284031215610a6757600080fd5b813561092d81610934565b634e487b7160e01b600052601160045260246000fd5b63ffffffff818116838216019080821115610aa557610aa5610a72565b5092915050565b600080600080600060a08688031215610ac457600080fd5b8551610acf81610934565b602087015160408801519196509450610ae7816108fe565b6060870151909350610af8816108fe565b6080870151909250610b0981610934565b809150509295509295909350565b600060208284031215610b2957600080fd5b8151801515811461092d57600080fd5b600060018201610b4b57610b4b610a72565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220e4066f18eac2b7960a97a08f3c75ff02d511e69f619665bb394e53b0581a221164736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "isFrozen()": {
        "returns": {
          "_0": "bool whether the DAO is currently frozen"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setUp(bytes)": {
        "params": {
          "initializeParams": "encoded initialization parameters: `address _owner`, `uint256 _freezeVotesThreshold`, `uint256 _freezeProposalPeriod`, `uint256 _freezePeriod`, `address _parentGnosisSafe`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateFreezePeriod(uint32)": {
        "params": {
          "_freezePeriod": "number of blocks a freeze lasts, from time of freeze proposal creation"
        }
      },
      "updateFreezeProposalPeriod(uint32)": {
        "params": {
          "_freezeProposalPeriod": "number of blocks a freeze vote has to succeed to enact a freeze"
        }
      },
      "updateFreezeVotesThreshold(uint256)": {
        "params": {
          "_freezeVotesThreshold": "number of freeze votes required to activate a freeze"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "castFreezeVote()": {
        "notice": "Allows an address to cast a \"freeze vote\", which is a vote to freeze the DAO from executing transactions, even if they've already passed via a Proposal. If a vote to freeze has not already been initiated, a call to this function will do so. This function should be publicly callable by any DAO token holder or signer."
      },
      "freezePeriod()": {
        "notice": "Number of blocks a freeze lasts, from time of freeze proposal creation. "
      },
      "freezeProposalCreatedBlock()": {
        "notice": "Block number the freeze proposal was created at. "
      },
      "freezeProposalPeriod()": {
        "notice": "Number of blocks a freeze proposal has to succeed. "
      },
      "freezeProposalVoteCount()": {
        "notice": "Number of accrued freeze votes. "
      },
      "freezeVotesThreshold()": {
        "notice": "Number of freeze votes required to activate a freeze. "
      },
      "isFrozen()": {
        "notice": "Returns true if the DAO is currently frozen, false otherwise. "
      },
      "setUp(bytes)": {
        "notice": "Initialize function, will be triggered when a new instance is deployed."
      },
      "unfreeze()": {
        "notice": "Unfreezes the DAO, only callable by the owner (parentDAO)."
      },
      "updateFreezePeriod(uint32)": {
        "notice": "Updates the freeze period, the time the DAO will be unable to execute transactions for, should a freeze vote pass."
      },
      "updateFreezeProposalPeriod(uint32)": {
        "notice": "Updates the freeze proposal period, the time that parent token holders have to cast votes after a freeze vote has been initiated."
      },
      "updateFreezeVotesThreshold(uint256)": {
        "notice": "Updates the freeze votes threshold, the number of votes required to enact a freeze."
      },
      "userHasFreezeVoted(address,uint256)": {
        "notice": "Mapping of address to the block the freeze vote was started to  whether the address has voted yet on the freeze proposal."
      }
    },
    "notice": "A BaseFreezeVoting implementation which handles freezes on multi-sig (Safe) based DAOs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3006,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3009,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5908,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2800,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2920,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11993,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "freezeProposalCreatedBlock",
        "offset": 0,
        "slot": "101",
        "type": "t_uint32"
      },
      {
        "astId": 11996,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "freezeProposalPeriod",
        "offset": 4,
        "slot": "101",
        "type": "t_uint32"
      },
      {
        "astId": 11999,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "freezePeriod",
        "offset": 8,
        "slot": "101",
        "type": "t_uint32"
      },
      {
        "astId": 12002,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "freezeVotesThreshold",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 12005,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "freezeProposalVoteCount",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 12012,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "userHasFreezeVoted",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 13572,
        "contract": "contracts/MultisigFreezeVoting.sol:MultisigFreezeVoting",
        "label": "parentGnosisSafe",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ISafe)17663"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISafe)17663": {
        "encoding": "inplace",
        "label": "contract ISafe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}