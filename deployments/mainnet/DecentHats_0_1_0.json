{
  "address": "0x00b089E0A6fdE24cf8978994c7BcD24fc1D79825",
  "abi": [
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IHats",
              "name": "hatsProtocol",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "hatsAccountImplementation",
              "type": "address"
            },
            {
              "internalType": "contract IERC6551Registry",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "keyValuePairs",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "topHatDetails",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "topHatImageURI",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "maxSupply",
                  "type": "uint32"
                },
                {
                  "internalType": "string",
                  "name": "details",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "imageURI",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isMutable",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "wearer",
                  "type": "address"
                }
              ],
              "internalType": "struct DecentHats_0_1_0.Hat",
              "name": "adminHat",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "maxSupply",
                  "type": "uint32"
                },
                {
                  "internalType": "string",
                  "name": "details",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "imageURI",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "isMutable",
                  "type": "bool"
                },
                {
                  "internalType": "address",
                  "name": "wearer",
                  "type": "address"
                }
              ],
              "internalType": "struct DecentHats_0_1_0.Hat[]",
              "name": "hats",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DecentHats_0_1_0.CreateTreeParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createAndDeclareTree",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfbda17788d3c9cabb36554434e15de11550808248c0ce91e46d99562d54e5fa9",
  "receipt": {
    "to": null,
    "from": "0xb5Ca125166C1987A35EDD550E16846Fa1e1D9bB3",
    "contractAddress": "0x00b089E0A6fdE24cf8978994c7BcD24fc1D79825",
    "transactionIndex": 86,
    "gasUsed": "848547",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x57030dfb47a4d8849d866b294eb35a5342e7273cf170b443aa3d512f9850c35b",
    "transactionHash": "0xfbda17788d3c9cabb36554434e15de11550808248c0ce91e46d99562d54e5fa9",
    "logs": [],
    "blockNumber": 20274209,
    "cumulativeGasUsed": "9373105",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "88a7dc38a4aa54f89c0bd740dfe90545",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IHats\",\"name\":\"hatsProtocol\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hatsAccountImplementation\",\"type\":\"address\"},{\"internalType\":\"contract IERC6551Registry\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keyValuePairs\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topHatDetails\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"topHatImageURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMutable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wearer\",\"type\":\"address\"}],\"internalType\":\"struct DecentHats_0_1_0.Hat\",\"name\":\"adminHat\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"details\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isMutable\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"wearer\",\"type\":\"address\"}],\"internalType\":\"struct DecentHats_0_1_0.Hat[]\",\"name\":\"hats\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DecentHats_0_1_0.CreateTreeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createAndDeclareTree\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DecentHats_0_1_0.sol\":\"DecentHats_0_1_0\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac Avatar - A contract that manages modules that can execute transactions via this contract.\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\ninterface IAvatar {\\n    event EnabledModule(address module);\\n    event DisabledModule(address module);\\n    event ExecutionFromModuleSuccess(address indexed module);\\n    event ExecutionFromModuleFailure(address indexed module);\\n\\n    /// @dev Enables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Modules should be stored as a linked list.\\n    /// @notice Must emit EnabledModule(address module) if successful.\\n    /// @param module Module to be enabled.\\n    function enableModule(address module) external;\\n\\n    /// @dev Disables a module on the avatar.\\n    /// @notice Can only be called by the avatar.\\n    /// @notice Must emit DisabledModule(address module) if successful.\\n    /// @param prevModule Address that pointed to the module to be removed in the linked list\\n    /// @param module Module to be removed.\\n    function disableModule(address prevModule, address module) external;\\n\\n    /// @dev Allows a Module to execute a transaction.\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModule(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success);\\n\\n    /// @dev Allows a Module to execute a transaction and return data\\n    /// @notice Can only be called by an enabled module.\\n    /// @notice Must emit ExecutionFromModuleSuccess(address module) if successful.\\n    /// @notice Must emit ExecutionFromModuleFailure(address module) if unsuccessful.\\n    /// @param to Destination address of module transaction.\\n    /// @param value Ether value of module transaction.\\n    /// @param data Data payload of module transaction.\\n    /// @param operation Operation type of module transaction: 0 == call, 1 == delegate call.\\n    function execTransactionFromModuleReturnData(\\n        address to,\\n        uint256 value,\\n        bytes memory data,\\n        Enum.Operation operation\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    /// @dev Returns if an module is enabled\\n    /// @return True if the module is enabled\\n    function isModuleEnabled(address module) external view returns (bool);\\n\\n    /// @dev Returns array of modules.\\n    /// @param start Start of the page.\\n    /// @param pageSize Maximum number of modules that should be returned.\\n    /// @return array Array of modules.\\n    /// @return next Start of the next page.\\n    function getModulesPaginated(address start, uint256 pageSize)\\n        external\\n        view\\n        returns (address[] memory array, address next);\\n}\\n\",\"keccak256\":\"0xcd5508ffe596eef8fbccfd5fc4f10a34397773547ce64e212d48b5212865ec1f\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/DecentHats_0_1_0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport {Enum} from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\nimport {IAvatar} from \\\"@gnosis.pm/zodiac/contracts/interfaces/IAvatar.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC6551Registry} from \\\"./interfaces/IERC6551Registry.sol\\\";\\nimport {IHats} from \\\"./interfaces/hats/IHats.sol\\\";\\n\\ncontract DecentHats_0_1_0 {\\n    string public constant NAME = \\\"DecentHats_0_1_0\\\";\\n\\n    struct Hat {\\n        uint32 maxSupply;\\n        string details;\\n        string imageURI;\\n        bool isMutable;\\n        address wearer;\\n    }\\n\\n    struct CreateTreeParams {\\n        IHats hatsProtocol;\\n        address hatsAccountImplementation;\\n        IERC6551Registry registry;\\n        address keyValuePairs;\\n        string topHatDetails;\\n        string topHatImageURI;\\n        Hat adminHat;\\n        Hat[] hats;\\n    }\\n\\n    function getSalt() internal view returns (bytes32 salt) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        bytes memory concatenatedSaltInput = abi.encodePacked(\\n            NAME,\\n            chainId,\\n            address(this)\\n        );\\n\\n        salt = keccak256(concatenatedSaltInput);\\n    }\\n\\n    function createTopHat(\\n        IHats _hatsProtocol,\\n        string memory _topHatDetails,\\n        string memory _topHatImageURI\\n    ) internal returns (uint256) {\\n        return\\n            _hatsProtocol.mintTopHat(\\n                address(this),\\n                _topHatDetails,\\n                _topHatImageURI\\n            );\\n    }\\n\\n    function createAccount(\\n        IERC6551Registry _registry,\\n        address _hatsAccountImplementation,\\n        bytes32 salt,\\n        address protocolAddress,\\n        uint256 hatId\\n    ) internal returns (address) {\\n        return\\n            _registry.createAccount(\\n                _hatsAccountImplementation,\\n                salt,\\n                block.chainid,\\n                protocolAddress,\\n                hatId\\n            );\\n    }\\n\\n    function updateKeyValuePairs(\\n        address _keyValuePairs,\\n        uint256 topHatId\\n    ) internal {\\n        string[] memory keys = new string[](1);\\n        string[] memory values = new string[](1);\\n        keys[0] = \\\"topHatId\\\";\\n        values[0] = Strings.toString(topHatId);\\n\\n        IAvatar(msg.sender).execTransactionFromModule(\\n            _keyValuePairs,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"updateValues(string[],string[])\\\",\\n                keys,\\n                values\\n            ),\\n            Enum.Operation.Call\\n        );\\n    }\\n\\n    function createHat(\\n        IHats _hatsProtocol,\\n        uint256 adminHatId,\\n        Hat memory _hat,\\n        address topHatAccount\\n    ) internal returns (uint256) {\\n        return\\n            _hatsProtocol.createHat(\\n                adminHatId,\\n                _hat.details,\\n                _hat.maxSupply,\\n                topHatAccount,\\n                topHatAccount,\\n                _hat.isMutable,\\n                _hat.imageURI\\n            );\\n    }\\n\\n    function createHatAccountMint(\\n        IHats hatsProtocol,\\n        uint256 adminHatId,\\n        Hat calldata hat,\\n        address topHatAccount,\\n        IERC6551Registry registry,\\n        address hatsAccountImplementation,\\n        bytes32 salt\\n    ) internal returns (uint256 hatId, address accountAddress) {\\n        hatId = createHat(hatsProtocol, adminHatId, hat, topHatAccount);\\n\\n        accountAddress = createAccount(\\n            registry,\\n            hatsAccountImplementation,\\n            salt,\\n            address(hatsProtocol),\\n            hatId\\n        );\\n\\n        if (hat.wearer != address(0)) {\\n            hatsProtocol.mintHat(hatId, hat.wearer);\\n        }\\n    }\\n\\n    function handleHats(\\n        IHats _hatsProtocol,\\n        IERC6551Registry _registry,\\n        address _hatsAccountImplementation,\\n        bytes32 salt,\\n        address topHatAccount,\\n        uint256 adminHatId,\\n        Hat[] calldata _hats\\n    ) internal {\\n        for (uint256 i = 0; i < _hats.length; ) {\\n            createHatAccountMint(\\n                _hatsProtocol,\\n                adminHatId,\\n                _hats[i],\\n                topHatAccount,\\n                _registry,\\n                _hatsAccountImplementation,\\n                salt\\n            );\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function createAndDeclareTree(CreateTreeParams calldata params) public {\\n        bytes32 salt = getSalt();\\n        uint256 topHatId = createTopHat(\\n            params.hatsProtocol,\\n            params.topHatDetails,\\n            params.topHatImageURI\\n        );\\n        address topHatAccount = createAccount(\\n            params.registry,\\n            params.hatsAccountImplementation,\\n            salt,\\n            address(params.hatsProtocol),\\n            topHatId\\n        );\\n\\n        updateKeyValuePairs(params.keyValuePairs, topHatId);\\n\\n        (uint256 adminHatId, ) = createHatAccountMint(\\n            params.hatsProtocol,\\n            topHatId,\\n            params.adminHat,\\n            topHatAccount,\\n            params.registry,\\n            params.hatsAccountImplementation,\\n            salt\\n        );\\n\\n        handleHats(\\n            params.hatsProtocol,\\n            params.registry,\\n            params.hatsAccountImplementation,\\n            salt,\\n            topHatAccount,\\n            adminHatId,\\n            params.hats\\n        );\\n\\n        params.hatsProtocol.transferHat(topHatId, address(this), msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xd7dbbda48b0f7eedeef3882aab51e93c4881a47bcb09b2f9a20989d22259f027\",\"license\":\"MIT\"},\"contracts/interfaces/IERC6551Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IERC6551Registry {\\n    /**\\n     * @dev Creates a token bound account for a non-fungible token.\\n     *\\n     * If account has already been created, returns the account address without calling create2.\\n     *\\n     * Emits ERC6551AccountCreated event.\\n     *\\n     * @return account The address of the token bound account\\n     */\\n    function createAccount(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 chainId,\\n        address tokenContract,\\n        uint256 tokenId\\n    ) external returns (address account);\\n}\\n\",\"keccak256\":\"0x64c52de8a8e68398e61dd8b42dda8e9af8cf6abf93bb85629c322440991ea568\",\"license\":\"MIT\"},\"contracts/interfaces/hats/IHats.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n// Copyright (C) 2023 Haberdasher Labs\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.13;\\n\\ninterface IHats {\\n    function mintTopHat(\\n        address _target,\\n        string memory _details,\\n        string memory _imageURI\\n    ) external returns (uint256 topHatId);\\n\\n    function createHat(\\n        uint256 _admin,\\n        string calldata _details,\\n        uint32 _maxSupply,\\n        address _eligibility,\\n        address _toggle,\\n        bool _mutable,\\n        string calldata _imageURI\\n    ) external returns (uint256 newHatId);\\n\\n    function mintHat(\\n        uint256 _hatId,\\n        address _wearer\\n    ) external returns (bool success);\\n\\n    function transferHat(uint256 _hatId, address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0x8e35022f5c0fcf0059033abec78ec890f0cf3bbac09d6d24051cff9679239511\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610e63806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a3f4df7e1461003b578063c1bce50714610080575b600080fd5b61006a6040518060400160405280601081526020016f0446563656e74486174735f305f315f360841b81525081565b60405161007791906108a5565b60405180910390f35b61009361008e3660046108bf565b610095565b005b600061009f61029d565b9050600061013c6100b36020850185610913565b6100c06080860186610930565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101029250505060a0870187610930565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061030192505050565b905060006101776101536060860160408701610913565b6101636040870160208801610913565b856101716020890189610913565b8661037f565b905061019261018c6080860160608701610913565b83610415565b60006101d96101a46020870187610913565b846101b260c089018961098e565b856101c360608b0160408c01610913565b6101d360408c0160208d01610913565b8a610595565b5090506102216101ec6020870187610913565b6101fc6060880160408901610913565b61020c6040890160208a01610913565b87868661021c60e08d018d6109ae565b61067b565b61022e6020860186610913565b6040516329287c1b60e21b8152600481018590523060248201523360448201526001600160a01b03919091169063a4a1f06c90606401600060405180830381600087803b15801561027e57600080fd5b505af1158015610292573d6000803e3d6000fd5b505050505050505050565b60008046905060006040518060400160405280601081526020016f0446563656e74486174735f305f315f360841b81525082306040516020016102e2939291906109f8565b60408051601f1981840301815291905280516020909101209392505050565b604051631a64dfad60e01b81526000906001600160a01b03851690631a64dfad9061033490309087908790600401610a31565b6020604051808303816000875af1158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610a67565b949350505050565b604051638a54c52f60e01b81526001600160a01b0385811660048301526024820185905246604483015283811660648301526084820183905260009190871690638a54c52f9060a4016020604051808303816000875af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610a80565b9695505050505050565b604080516001808252818301909252600091816020015b606081526020019060019003908161042c57505060408051600180825281830190925291925060009190602082015b606081526020019060019003908161045b579050509050604051806040016040528060088152602001671d1bdc12185d125960c21b815250826000815181106104a6576104a6610ab3565b60200260200101819052506104ba836106c2565b816000815181106104cd576104cd610ab3565b6020026020010181905250336001600160a01b031663468721a785600085856040516024016104fd929190610b1e565b60408051601f198184030181529181526020820180516001600160e01b031663579374b960e11b1790525160e085901b6001600160e01b031916815261054b93929190600090600401610b43565b6020604051808303816000875af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610ba7565b5050505050565b6000806105ac89896105a68a610c85565b896107c3565b91506105bb8585858c8661037f565b905060006105cf60a0890160808a01610913565b6001600160a01b03161461066f576001600160a01b03891663641f776e836105fd60a08b0160808c01610913565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610ba7565b505b97509795505050505050565b60005b81811015610292576106b8898585858581811061069d5761069d610ab3565b90506020028101906106af919061098e565b888c8c8c610595565b505060010161067e565b6060816000036106e95750506040805180820190915260018152600360fc1b602082015290565b8160005b811561071357806106fd81610d46565b915061070c9050600a83610d75565b91506106ed565b60008167ffffffffffffffff81111561072e5761072e610a9d565b6040519080825280601f01601f191660200182016040528015610758576020820181803683370190505b5090505b84156103775761076d600183610d89565b915061077a600a86610da2565b610785906030610db6565b60f81b81838151811061079a5761079a610ab3565b60200101906001600160f81b031916908160001a9053506107bc600a86610d75565b945061075c565b6020820151825160608401516040808601519051635829492f60e11b81526000946001600160a01b038a169463b052925e94610809948b948a9283929091600401610dc9565b6020604051808303816000875af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610a67565b95945050505050565b60005b83811015610870578181015183820152602001610858565b50506000910152565b60008151808452610891816020860160208601610855565b601f01601f19169290920160200192915050565b6020815260006108b86020830184610879565b9392505050565b6000602082840312156108d157600080fd5b813567ffffffffffffffff8111156108e857600080fd5b820161010081850312156108b857600080fd5b6001600160a01b038116811461091057600080fd5b50565b60006020828403121561092557600080fd5b81356108b8816108fb565b6000808335601e1984360301811261094757600080fd5b83018035915067ffffffffffffffff82111561096257600080fd5b60200191503681900382131561097757600080fd5b9250929050565b8035610989816108fb565b919050565b60008235609e198336030181126109a457600080fd5b9190910192915050565b6000808335601e198436030181126109c557600080fd5b83018035915067ffffffffffffffff8211156109e057600080fd5b6020019150600581901b360382131561097757600080fd5b60008451610a0a818460208901610855565b919091019283525060601b6bffffffffffffffffffffffff19166020820152603401919050565b6001600160a01b0384168152606060208201819052600090610a5590830185610879565b828103604084015261040b8185610879565b600060208284031215610a7957600080fd5b5051919050565b600060208284031215610a9257600080fd5b81516108b8816108fb565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b85811015610b11578284038952610aff848351610879565b98850198935090840190600101610ae7565b5091979650505050505050565b604081526000610b316040830185610ac9565b828103602084015261084c8185610ac9565b60018060a01b0385168152836020820152608060408201526000610b6a6080830185610879565b905060028310610b8a57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b801515811461091057600080fd5b600060208284031215610bb957600080fd5b81516108b881610b99565b60405160a0810167ffffffffffffffff81118282101715610be757610be7610a9d565b60405290565b600082601f830112610bfe57600080fd5b813567ffffffffffffffff80821115610c1957610c19610a9d565b604051601f8301601f19908116603f01168101908282118183101715610c4157610c41610a9d565b81604052838152866020858801011115610c5a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561098981610b99565b600060a08236031215610c9757600080fd5b610c9f610bc4565b823563ffffffff81168114610cb357600080fd5b8152602083013567ffffffffffffffff80821115610cd057600080fd5b610cdc36838701610bed565b60208401526040850135915080821115610cf557600080fd5b50610d0236828601610bed565b604083015250610d1460608401610c7a565b6060820152610d256080840161097e565b608082015292915050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d5857610d58610d30565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610d8457610d84610d5f565b500490565b81810381811115610d9c57610d9c610d30565b92915050565b600082610db157610db1610d5f565b500690565b80820180821115610d9c57610d9c610d30565b87815260e060208201526000610de260e0830189610879565b63ffffffff881660408401526001600160a01b0387811660608501528616608084015284151560a084015282810360c0840152610e1f8185610879565b9a995050505050505050505056fea264697066735822122040470770e7f603d20cdea8118401756a0349e1cdc776519095ccf844ef03c2cd64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063a3f4df7e1461003b578063c1bce50714610080575b600080fd5b61006a6040518060400160405280601081526020016f0446563656e74486174735f305f315f360841b81525081565b60405161007791906108a5565b60405180910390f35b61009361008e3660046108bf565b610095565b005b600061009f61029d565b9050600061013c6100b36020850185610913565b6100c06080860186610930565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101029250505060a0870187610930565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061030192505050565b905060006101776101536060860160408701610913565b6101636040870160208801610913565b856101716020890189610913565b8661037f565b905061019261018c6080860160608701610913565b83610415565b60006101d96101a46020870187610913565b846101b260c089018961098e565b856101c360608b0160408c01610913565b6101d360408c0160208d01610913565b8a610595565b5090506102216101ec6020870187610913565b6101fc6060880160408901610913565b61020c6040890160208a01610913565b87868661021c60e08d018d6109ae565b61067b565b61022e6020860186610913565b6040516329287c1b60e21b8152600481018590523060248201523360448201526001600160a01b03919091169063a4a1f06c90606401600060405180830381600087803b15801561027e57600080fd5b505af1158015610292573d6000803e3d6000fd5b505050505050505050565b60008046905060006040518060400160405280601081526020016f0446563656e74486174735f305f315f360841b81525082306040516020016102e2939291906109f8565b60408051601f1981840301815291905280516020909101209392505050565b604051631a64dfad60e01b81526000906001600160a01b03851690631a64dfad9061033490309087908790600401610a31565b6020604051808303816000875af1158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610a67565b949350505050565b604051638a54c52f60e01b81526001600160a01b0385811660048301526024820185905246604483015283811660648301526084820183905260009190871690638a54c52f9060a4016020604051808303816000875af11580156103e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040b9190610a80565b9695505050505050565b604080516001808252818301909252600091816020015b606081526020019060019003908161042c57505060408051600180825281830190925291925060009190602082015b606081526020019060019003908161045b579050509050604051806040016040528060088152602001671d1bdc12185d125960c21b815250826000815181106104a6576104a6610ab3565b60200260200101819052506104ba836106c2565b816000815181106104cd576104cd610ab3565b6020026020010181905250336001600160a01b031663468721a785600085856040516024016104fd929190610b1e565b60408051601f198184030181529181526020820180516001600160e01b031663579374b960e11b1790525160e085901b6001600160e01b031916815261054b93929190600090600401610b43565b6020604051808303816000875af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610ba7565b5050505050565b6000806105ac89896105a68a610c85565b896107c3565b91506105bb8585858c8661037f565b905060006105cf60a0890160808a01610913565b6001600160a01b03161461066f576001600160a01b03891663641f776e836105fd60a08b0160808c01610913565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044016020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190610ba7565b505b97509795505050505050565b60005b81811015610292576106b8898585858581811061069d5761069d610ab3565b90506020028101906106af919061098e565b888c8c8c610595565b505060010161067e565b6060816000036106e95750506040805180820190915260018152600360fc1b602082015290565b8160005b811561071357806106fd81610d46565b915061070c9050600a83610d75565b91506106ed565b60008167ffffffffffffffff81111561072e5761072e610a9d565b6040519080825280601f01601f191660200182016040528015610758576020820181803683370190505b5090505b84156103775761076d600183610d89565b915061077a600a86610da2565b610785906030610db6565b60f81b81838151811061079a5761079a610ab3565b60200101906001600160f81b031916908160001a9053506107bc600a86610d75565b945061075c565b6020820151825160608401516040808601519051635829492f60e11b81526000946001600160a01b038a169463b052925e94610809948b948a9283929091600401610dc9565b6020604051808303816000875af1158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c9190610a67565b95945050505050565b60005b83811015610870578181015183820152602001610858565b50506000910152565b60008151808452610891816020860160208601610855565b601f01601f19169290920160200192915050565b6020815260006108b86020830184610879565b9392505050565b6000602082840312156108d157600080fd5b813567ffffffffffffffff8111156108e857600080fd5b820161010081850312156108b857600080fd5b6001600160a01b038116811461091057600080fd5b50565b60006020828403121561092557600080fd5b81356108b8816108fb565b6000808335601e1984360301811261094757600080fd5b83018035915067ffffffffffffffff82111561096257600080fd5b60200191503681900382131561097757600080fd5b9250929050565b8035610989816108fb565b919050565b60008235609e198336030181126109a457600080fd5b9190910192915050565b6000808335601e198436030181126109c557600080fd5b83018035915067ffffffffffffffff8211156109e057600080fd5b6020019150600581901b360382131561097757600080fd5b60008451610a0a818460208901610855565b919091019283525060601b6bffffffffffffffffffffffff19166020820152603401919050565b6001600160a01b0384168152606060208201819052600090610a5590830185610879565b828103604084015261040b8185610879565b600060208284031215610a7957600080fd5b5051919050565b600060208284031215610a9257600080fd5b81516108b8816108fb565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b85811015610b11578284038952610aff848351610879565b98850198935090840190600101610ae7565b5091979650505050505050565b604081526000610b316040830185610ac9565b828103602084015261084c8185610ac9565b60018060a01b0385168152836020820152608060408201526000610b6a6080830185610879565b905060028310610b8a57634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b801515811461091057600080fd5b600060208284031215610bb957600080fd5b81516108b881610b99565b60405160a0810167ffffffffffffffff81118282101715610be757610be7610a9d565b60405290565b600082601f830112610bfe57600080fd5b813567ffffffffffffffff80821115610c1957610c19610a9d565b604051601f8301601f19908116603f01168101908282118183101715610c4157610c41610a9d565b81604052838152866020858801011115610c5a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561098981610b99565b600060a08236031215610c9757600080fd5b610c9f610bc4565b823563ffffffff81168114610cb357600080fd5b8152602083013567ffffffffffffffff80821115610cd057600080fd5b610cdc36838701610bed565b60208401526040850135915080821115610cf557600080fd5b50610d0236828601610bed565b604083015250610d1460608401610c7a565b6060820152610d256080840161097e565b608082015292915050565b634e487b7160e01b600052601160045260246000fd5b600060018201610d5857610d58610d30565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082610d8457610d84610d5f565b500490565b81810381811115610d9c57610d9c610d30565b92915050565b600082610db157610db1610d5f565b500690565b80820180821115610d9c57610d9c610d30565b87815260e060208201526000610de260e0830189610879565b63ffffffff881660408401526001600160a01b0387811660608501528616608084015284151560a084015282810360c0840152610e1f8185610879565b9a995050505050505050505056fea264697066735822122040470770e7f603d20cdea8118401756a0349e1cdc776519095ccf844ef03c2cd64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}