{
  "address": "0x023BDAEFeDDDdd5B43aF125CAA8007a99A886Fd3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "daoAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "daoName",
          "type": "string"
        }
      ],
      "name": "FractalNameUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentDAOAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "subDAOAddress",
          "type": "address"
        }
      ],
      "name": "FractalSubDAODeclared",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subDAOAddress",
          "type": "address"
        }
      ],
      "name": "declareSubDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "updateDAOName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79b827ea0f8afd1a7a7c4e9f004b36a5bcbc00006b8fc9c3a8b5c86780081589",
  "receipt": {
    "to": null,
    "from": "0xb5Ca125166C1987A35EDD550E16846Fa1e1D9bB3",
    "contractAddress": "0x023BDAEFeDDDdd5B43aF125CAA8007a99A886Fd3",
    "transactionIndex": 5,
    "gasUsed": "183485",
    "logsBloom": "0x
    "blockHash": "0x3dd90dc82beea5b39bd7d4fc0b960a916d6621a1386135c73f6ae42e8ca32366",
    "transactionHash": "0x79b827ea0f8afd1a7a7c4e9f004b36a5bcbc00006b8fc9c3a8b5c86780081589",
    "logs": [],
    "blockNumber": 118640391,
    "cumulativeGasUsed": "672901",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6969d63459ce17f5a879f7f9d1507f8e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"daoAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"daoName\",\"type\":\"string\"}],\"name\":\"FractalNameUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentDAOAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"subDAOAddress\",\"type\":\"address\"}],\"name\":\"FractalSubDAODeclared\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subDAOAddress\",\"type\":\"address\"}],\"name\":\"declareSubDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"updateDAOName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"declareSubDAO(address)\":{\"params\":{\"_subDAOAddress\":\"address of the subDAO to declare       as a child of the caller\"}},\"updateDAOName(string)\":{\"params\":{\"_name\":\"new DAO name\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"declareSubDAO(address)\":{\"notice\":\"Declares an address as a subDAO of the caller's address. This declaration has no binding logic, and serves only to allow us to find the list of \\\"potential\\\" subDAOs of any  given Safe address. Given the list of declaring events, we can then check each Safe still has a [FractalModule](../FractalModule.md) attached. If no FractalModule is attached, we'll exclude it from the DAO hierarchy. In the case of a Safe attaching a FractalModule without calling  to declare it, we would unfortunately not know to display it  as a subDAO.\"},\"updateDAOName(string)\":{\"notice\":\"Updates a DAO's registered \\\"name\\\". This is a simple string with no restrictions or validation for uniqueness.\"}},\"notice\":\"Implementation of [IFractalRegistry](./interfaces/IFractalRegistry.md).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FractalRegistry.sol\":\"FractalRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/FractalRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { IFractalRegistry } from \\\"./interfaces/IFractalRegistry.sol\\\";\\n\\n/**\\n * Implementation of [IFractalRegistry](./interfaces/IFractalRegistry.md).\\n */\\ncontract FractalRegistry is IFractalRegistry {\\n\\n    event FractalNameUpdated(address indexed daoAddress, string daoName);\\n    event FractalSubDAODeclared(address indexed parentDAOAddress, address indexed subDAOAddress);\\n\\n    /** @inheritdoc IFractalRegistry*/\\n    function updateDAOName(string memory _name) external {\\n        emit FractalNameUpdated(msg.sender, _name);\\n    }\\n\\n    /** @inheritdoc IFractalRegistry*/\\n    function declareSubDAO(address _subDAOAddress) external {\\n        emit FractalSubDAODeclared(msg.sender, _subDAOAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x7adce05a4b6beadbe877cbab3cc6111444e25545217078a56baefdfc0bdea53f\",\"license\":\"MIT\"},\"contracts/interfaces/IFractalRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\n/**\\n * A utility contract which logs events pertaining to Fractal DAO metadata.\\n */\\ninterface IFractalRegistry {\\n\\n    /**\\n     * Updates a DAO's registered \\\"name\\\". This is a simple string\\n     * with no restrictions or validation for uniqueness.\\n     *\\n     * @param _name new DAO name\\n     */\\n    function updateDAOName(string memory _name) external;\\n\\n    /**\\n     * Declares an address as a subDAO of the caller's address.\\n     *\\n     * This declaration has no binding logic, and serves only\\n     * to allow us to find the list of \\\"potential\\\" subDAOs of any \\n     * given Safe address.\\n     *\\n     * Given the list of declaring events, we can then check each\\n     * Safe still has a [FractalModule](../FractalModule.md) attached.\\n     *\\n     * If no FractalModule is attached, we'll exclude it from the\\n     * DAO hierarchy.\\n     *\\n     * In the case of a Safe attaching a FractalModule without calling \\n     * to declare it, we would unfortunately not know to display it \\n     * as a subDAO.\\n     *\\n     * @param _subDAOAddress address of the subDAO to declare \\n     *      as a child of the caller\\n     */\\n    function declareSubDAO(address _subDAOAddress) external;\\n}\\n\",\"keccak256\":\"0xfc6a8701bbc54f129d3c5f93634d97ce7b09cf0a2a15b6595c46a5a637e7da20\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061025b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ad25ee4a1461003b578063b7d0e69114610050575b600080fd5b61004e6100493660046100f6565b610063565b005b61004e61005e3660046101a7565b6100a7565b336001600160a01b03167f3c7e9162ed121fd2c775c8c39886daeaede693a6e24ac0fa81e50c47833a9e088260405161009c91906101d7565b60405180910390a250565b6040516001600160a01b0382169033907f099c708754e573857f5a1999a474653fd72d617a0619e740e41bd3b882b64bb890600090a350565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561010857600080fd5b813567ffffffffffffffff8082111561012057600080fd5b818401915084601f83011261013457600080fd5b813581811115610146576101466100e0565b604051601f8201601f19908116603f0116810190838211818310171561016e5761016e6100e0565b8160405282815287602084870101111561018757600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156101b957600080fd5b81356001600160a01b03811681146101d057600080fd5b9392505050565b600060208083528351808285015260005b81811015610204578581018301518582016040015282016101e8565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220e2b1f1b3d902ef6591361d379f3e52d6019e14289e0c0637d7e5b94f829575bc64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063ad25ee4a1461003b578063b7d0e69114610050575b600080fd5b61004e6100493660046100f6565b610063565b005b61004e61005e3660046101a7565b6100a7565b336001600160a01b03167f3c7e9162ed121fd2c775c8c39886daeaede693a6e24ac0fa81e50c47833a9e088260405161009c91906101d7565b60405180910390a250565b6040516001600160a01b0382169033907f099c708754e573857f5a1999a474653fd72d617a0619e740e41bd3b882b64bb890600090a350565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561010857600080fd5b813567ffffffffffffffff8082111561012057600080fd5b818401915084601f83011261013457600080fd5b813581811115610146576101466100e0565b604051601f8201601f19908116603f0116810190838211818310171561016e5761016e6100e0565b8160405282815287602084870101111561018757600080fd5b826020860160208301376000928101602001929092525095945050505050565b6000602082840312156101b957600080fd5b81356001600160a01b03811681146101d057600080fd5b9392505050565b600060208083528351808285015260005b81811015610204578581018301518582016040015282016101e8565b506000604082860101526040601f19601f830116850101925050509291505056fea2646970667358221220e2b1f1b3d902ef6591361d379f3e52d6019e14289e0c0637d7e5b94f829575bc64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "declareSubDAO(address)": {
        "params": {
          "_subDAOAddress": "address of the subDAO to declare       as a child of the caller"
        }
      },
      "updateDAOName(string)": {
        "params": {
          "_name": "new DAO name"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "declareSubDAO(address)": {
        "notice": "Declares an address as a subDAO of the caller's address. This declaration has no binding logic, and serves only to allow us to find the list of \"potential\" subDAOs of any  given Safe address. Given the list of declaring events, we can then check each Safe still has a [FractalModule](../FractalModule.md) attached. If no FractalModule is attached, we'll exclude it from the DAO hierarchy. In the case of a Safe attaching a FractalModule without calling  to declare it, we would unfortunately not know to display it  as a subDAO."
      },
      "updateDAOName(string)": {
        "notice": "Updates a DAO's registered \"name\". This is a simple string with no restrictions or validation for uniqueness."
      }
    },
    "notice": "Implementation of [IFractalRegistry](./interfaces/IFractalRegistry.md).",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}